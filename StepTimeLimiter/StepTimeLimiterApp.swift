import SwiftUI
import HealthKit
import Combine

@main
struct StepTimeLimiterApp: App {
    var body: some Scene {
        WindowGroup { ContentView() }
    }
}

// MARK: - ContentView
struct ContentView: View {
    @StateObject var model = AppModel()
    @State private var showAppSelector = false

    var body: some View {
        NavigationStack {
            ScrollView {
                VStack(spacing: 20) {
                    // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
                    HStack(spacing: 8) {
                        Text("üëü")
                            .font(.title)
                            .scaleEffect(1.2)
                            .rotationEffect(.degrees(model.isTrackingTime ? 15 : 0))
                            .animation(.easeInOut(duration: 0.5).repeatForever(autoreverses: true), value: model.isTrackingTime)
                        
                        Text("Step Trader")
                            .font(.largeTitle)
                            .fontWeight(.bold)
                            .foregroundStyle(
                                LinearGradient(
                                    colors: [.blue, .purple, .pink],
                                    startPoint: .topLeading,
                                    endPoint: .bottomTrailing
                                )
                            )
                        
                        Text("‚ö°")
                            .font(.title)
                            .scaleEffect(1.2)
                            .opacity(model.isTrackingTime ? 1.0 : 0.6)
                            .animation(.easeInOut(duration: 0.8).repeatForever(autoreverses: true), value: model.isTrackingTime)
                    }
                    .frame(maxWidth: .infinity, alignment: .center)
                    .padding(.top, 15)
                    .padding(.bottom, 5)
                    
                    // –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 2x2
                    LazyVGrid(columns: [
                        GridItem(.flexible(), spacing: 10),
                        GridItem(.flexible(), spacing: 10)
                    ], spacing: 15) {
                        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
                        StatCard(
                            title: "–®–∞–≥–∏ —Å–µ–≥–æ–¥–Ω—è",
                            value: Int(model.stepsToday).formatted(),
                            icon: "üëü",
                            color: .green
                        )
                        
                        // –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —à–∞–≥–æ–≤
                        StatCard(
                            title: "–ü–æ—Ç—Ä–∞—á–µ–Ω–æ —à–∞–≥–æ–≤",
                            value: model.spentSteps.formatted(),
                            icon: "üì±",
                            color: .orange
                        )
                        
                        // –ë—é–¥–∂–µ—Ç –º–∏–Ω—É—Ç
                        StatCard(
                            title: "–ë—é–¥–∂–µ—Ç –º–∏–Ω—É—Ç",
                            value: model.budget.dailyBudgetMinutes.formatted(),
                            icon: "‚è∞",
                            color: .blue
                        )
                        
                        // –û—Å—Ç–∞–ª–æ—Å—å –º–∏–Ω—É—Ç
                        StatCard(
                            title: "–û—Å—Ç–∞–ª–æ—Å—å –º–∏–Ω—É—Ç",
                            value: model.budget.remainingMinutes.formatted(),
                            icon: "‚è≥",
                            color: model.budget.remainingMinutes > 0 ? .green : .red
                        )
                    }
                    .padding(.horizontal)
                    
                    // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
                    VStack(spacing: 8) {
                        HStack {
                            Text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏")
                                .font(.headline)
                            Spacer()
                            Text("\(model.budget.dailyBudgetMinutes - model.budget.remainingMinutes)/\(model.budget.dailyBudgetMinutes) –º–∏–Ω")
                                .font(.caption)
                                .foregroundStyle(.secondary)
                        }
                        
                        ProgressView(
                            value: Double(max(0, model.budget.dailyBudgetMinutes - model.budget.remainingMinutes)),
                            total: Double(max(1, model.budget.dailyBudgetMinutes))
                        )
                        .progressViewStyle(LinearProgressViewStyle(tint: model.budget.remainingMinutes > 0 ? .blue : .red))
                    }
                    .padding()
                    .background(RoundedRectangle(cornerRadius: 16).fill(.ultraThinMaterial))
                    .padding(.horizontal)
                    
                    // –í—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
                    VStack(spacing: 12) {
                        HStack {
                            Text("–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")
                                .font(.headline)
                            Spacer()
                            Text("\(Int(model.budget.difficultyLevel.stepsPerMinute)) —à–∞–≥–æ–≤/–º–∏–Ω")
                                .font(.caption)
                                .foregroundStyle(.secondary)
                        }
                        
                        Picker("–°–ª–æ–∂–Ω–æ—Å—Ç—å", selection: Binding(
                            get: { model.budget.difficultyLevel },
                            set: { model.budget.difficultyLevel = $0 }
                        )) {
                            ForEach(DifficultyLevel.allCases, id: \.self) { level in
                                Text(level.rawValue).tag(level)
                            }
                        }
                        .pickerStyle(.segmented)
                    }
                    .padding()
                    .background(RoundedRectangle(cornerRadius: 16).fill(.ultraThinMaterial))
                    .padding(.horizontal)
                    
                    // –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                    VStack(spacing: 12) {
                        HStack {
                            Text("–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
                                .font(.headline)
                            Spacer()
                            Button("–í—ã–±—Ä–∞—Ç—å") {
                                showAppSelector = true
                            }
                            .buttonStyle(.bordered)
                            .controlSize(.small)
                        }
                        
                        if model.selectedApps.isEmpty {
                            Text("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω—ã")
                                .font(.caption)
                                .foregroundStyle(.secondary)
                                .frame(maxWidth: .infinity)
                                .padding(.vertical, 8)
                        } else {
                            LazyVGrid(columns: [
                                GridItem(.flexible()),
                                GridItem(.flexible()),
                                GridItem(.flexible())
                            ], spacing: 8) {
                                ForEach(model.selectedApps, id: \.self) { app in
                                    HStack(spacing: 4) {
                                        Text(app.icon)
                                            .font(.caption)
                                        Text(app.name)
                                            .font(.caption2)
                                            .lineLimit(1)
                                    }
                                    .padding(.horizontal, 6)
                                    .padding(.vertical, 4)
                                    .background(RoundedRectangle(cornerRadius: 6).fill(.blue.opacity(0.1)))
                                }
                            }
                        }
                    }
                    .padding()
                    .background(RoundedRectangle(cornerRadius: 16).fill(.ultraThinMaterial))
                    .padding(.horizontal)
                    
                    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏
                    if model.isTrackingTime {
                        VStack(spacing: 8) {
                            HStack {
                                Text("üî¥")
                                Text("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ")
                                    .font(.headline)
                                    .foregroundColor(.red)
                                Spacer()
                            }
                            
                            HStack {
                                Text("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
                                ForEach(model.selectedApps.prefix(3), id: \.self) { app in
                                    Text(app.icon)
                                }
                                if model.selectedApps.count > 3 {
                                    Text("+\(model.selectedApps.count - 3)")
                                        .font(.caption2)
                                }
                                Spacer()
                                if let elapsed = model.currentSessionElapsed {
                                    Text("–°–µ—Å—Å–∏—è: \(elapsed) –º–∏–Ω")
                                        .font(.caption)
                                        .foregroundStyle(.secondary)
                                }
                            }
                        }
                        .padding()
                        .background(RoundedRectangle(cornerRadius: 16).fill(.red.opacity(0.1)))
                        .overlay(
                            RoundedRectangle(cornerRadius: 16)
                                .stroke(.red.opacity(0.3), lineWidth: 1)
                        )
                        .padding(.horizontal)
                    }
                    
                    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    VStack(spacing: 12) {
                        Button("üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –±—é–¥–∂–µ—Ç") {
                            Task { try? await model.recalc() }
                        }
                        .frame(maxWidth: .infinity)
                        .buttonStyle(.bordered)
                        .controlSize(.large)
                        
                        Button(model.isTrackingTime ? "‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ" : "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ") {
                            model.toggleTimeTracking()
                        }
                        .frame(maxWidth: .infinity)
                        .buttonStyle(.borderedProminent)
                        .controlSize(.large)
                        .disabled(model.selectedApps.isEmpty)
                    }
                    .padding(.horizontal)
                    
                    Spacer(minLength: 20)
                }
            }
            .navigationTitle("")
            .navigationBarTitleDisplayMode(.inline)
            .task { await model.bootstrap() }
            .alert("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", isPresented: Binding(get: { model.message != nil }, set: { _ in model.message = nil })) {
                Button("OK", role: .cancel) {}
            } message: { Text(model.message ?? "") }
            .sheet(isPresented: $showAppSelector) {
                AppSelectorView(
                    availableApps: model.installedApps,
                    selectedApps: $model.selectedApps
                )
            }
        }
    }
}

// MARK: - App Selector View
struct AppSelectorView: View {
    let availableApps: [TrackedApp]
    @Binding var selectedApps: [TrackedApp]
    @Environment(\.dismiss) private var dismiss
    
    var body: some View {
        NavigationStack {
            List {
                if availableApps.isEmpty {
                    HStack {
                        Image(systemName: "exclamationmark.triangle")
                            .foregroundColor(.orange)
                        Text("–¶–µ–ª–µ–≤—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                            .foregroundStyle(.secondary)
                    }
                    .padding()
                } else {
                    Section("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è") {
                        ForEach(availableApps, id: \.self) { app in
                            HStack {
                                Text(app.icon)
                                    .font(.title2)
                                Text(app.name)
                                Spacer()
                                if selectedApps.contains(app) {
                                    Image(systemName: "checkmark.circle.fill")
                                        .foregroundColor(.blue)
                                }
                            }
                            .contentShape(Rectangle())
                            .onTapGesture {
                                if let index = selectedApps.firstIndex(of: app) {
                                    selectedApps.remove(at: index)
                                } else {
                                    selectedApps.append(app)
                                }
                            }
                        }
                    }
                }
                
                Section("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è") {
                    Text("–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ. –í—Ä–µ–º—è –±—É–¥–µ—Ç —Ç—Ä–∞—Ç–∏—Ç—å—Å—è –∏–∑ –æ–±—â–µ–≥–æ –±—é–¥–∂–µ—Ç–∞.")
                        .font(.caption)
                        .foregroundStyle(.secondary)
                }
            }
            .navigationTitle("–í—ã–±–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("–ì–æ—Ç–æ–≤–æ") {
                        dismiss()
                    }
                }
            }
        }
    }
}

// MARK: - App Model
struct TrackedApp: Hashable {
    let name: String
    let icon: String
    let bundleId: String
}

// MARK: - AppModel
@MainActor
final class AppModel: ObservableObject {
    let hk = HealthKitService()
    let budget = BudgetEngine()
    
    @Published var stepsToday: Double = 0
    @Published var spentSteps: Int = 0
    @Published var isTrackingTime = false
    @Published var message: String?
    @Published var selectedApps: [TrackedApp] = []
    @Published var currentSessionElapsed: Int?
    @Published var installedApps: [TrackedApp] = []
    
    private let targetApps = [
        TrackedApp(name: "Instagram", icon: "üì∑", bundleId: "com.burbn.instagram"),
        TrackedApp(name: "TikTok", icon: "üéµ", bundleId: "com.zhiliaoapp.musically"),
        TrackedApp(name: "YouTube", icon: "‚ñ∂Ô∏è", bundleId: "com.google.ios.youtube")
    ]
    
    private var startTime: Date?
    private var timer: Timer?

    func bootstrap() async {
        do {
            try await hk.requestAuthorization()
            checkInstalledApps()
            try await recalc()
        } catch {
            self.message = "–û—à–∏–±–∫–∞: \(error.localizedDescription)"
        }
    }
    
    private func checkInstalledApps() {
        // –î–ª—è –¥–µ–º–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ
        self.installedApps = targetApps
    }

    func recalc() async throws {
        budget.resetIfNeeded()
        stepsToday = try await hk.fetchTodaySteps()
        let mins = budget.minutes(from: stepsToday)
        budget.setBudget(minutes: mins)
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ —à–∞–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        let usedMinutes = budget.dailyBudgetMinutes - budget.remainingMinutes
        spentSteps = usedMinutes * Int(budget.difficultyLevel.stepsPerMinute)
        
        message = "–ë—é–¥–∂–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: \(mins) –º–∏–Ω—É—Ç –∏–∑ \(Int(stepsToday)) —à–∞–≥–æ–≤"
    }
    
    func toggleTimeTracking() {
        if isTrackingTime {
            stopTracking()
        } else {
            startTracking()
        }
    }
    
    private func startTracking() {
        guard budget.remainingMinutes > 0 else {
            message = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏! –°–¥–µ–ª–∞–π—Ç–µ –±–æ–ª—å—à–µ —à–∞–≥–æ–≤."
            return
        }
        
        guard !selectedApps.isEmpty else {
            message = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."
            return
        }
        
        isTrackingTime = true
        startTime = Date()
        currentSessionElapsed = 0
        
        let appNames = selectedApps.map { $0.name }.joined(separator: ", ")
        message = "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ (\(appNames)) –Ω–∞—á–∞—Ç–æ. –î–æ—Å—Ç—É–ø–Ω–æ: \(budget.remainingMinutes) –º–∏–Ω"
        
        // –¢–∞–π–º–µ—Ä –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        timer = Timer.scheduledTimer(withTimeInterval: 60, repeats: true) { [weak self] _ in
            Task { @MainActor [weak self] in
                self?.updateTimeSpent()
            }
        }
    }
    
    private func stopTracking() {
        isTrackingTime = false
        timer?.invalidate()
        timer = nil
        
        if let start = startTime {
            let elapsed = Int(Date().timeIntervalSince(start) / 60)
            budget.consume(mins: elapsed)
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ —à–∞–≥–∏
            let usedMinutes = budget.dailyBudgetMinutes - budget.remainingMinutes
            spentSteps = usedMinutes * Int(budget.difficultyLevel.stepsPerMinute)
            
            let appNames = selectedApps.map { $0.name }.joined(separator: ", ")
            message = "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ (\(appNames)) –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: \(elapsed) –º–∏–Ω. –û—Å—Ç–∞–ª–æ—Å—å: \(budget.remainingMinutes) –º–∏–Ω"
        }
        
        startTime = nil
        currentSessionElapsed = nil
    }
    
    private func updateTimeSpent() {
        guard let start = startTime else { return }
        
        let elapsed = Int(Date().timeIntervalSince(start) / 60)
        currentSessionElapsed = elapsed
        
        budget.consume(mins: 1) // –°–ø–∏—Å—ã–≤–∞–µ–º 1 –º–∏–Ω—É—Ç—É
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ —à–∞–≥–∏
        let usedMinutes = budget.dailyBudgetMinutes - budget.remainingMinutes
        spentSteps = usedMinutes * Int(budget.difficultyLevel.stepsPerMinute)
        
        if budget.remainingMinutes <= 0 {
            let appNames = selectedApps.map { $0.name }.joined(separator: ", ")
            stopTracking()
            message = "‚è∞ –í—Ä–µ–º—è –¥–ª—è (\(appNames)) –∏—Å—Ç–µ–∫–ª–æ! –°–¥–µ–ª–∞–π—Ç–µ –±–æ–ª—å—à–µ —à–∞–≥–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."
        }
    }
}

// MARK: - StatCard
struct StatCard: View {
    let title: String
    let value: String
    let icon: String
    let color: Color

    var body: some View {
        VStack(spacing: 8) {
            HStack {
                Text(icon)
                    .font(.title2)
                Spacer()
            }
            
            VStack(alignment: .leading, spacing: 4) {
                Text(title)
                    .font(.caption)
                    .foregroundStyle(.secondary)
                    .lineLimit(1)
                
                Text(value)
                    .font(.title2)
                    .fontWeight(.bold)
                    .foregroundColor(color)
                    .lineLimit(1)
            }
            .frame(maxWidth: .infinity, alignment: .leading)
        }
        .padding()
        .frame(height: 100)
        .background(RoundedRectangle(cornerRadius: 16).fill(.ultraThinMaterial))
        .overlay(
            RoundedRectangle(cornerRadius: 16)
                .stroke(color.opacity(0.3), lineWidth: 1)
        )
    }
}
