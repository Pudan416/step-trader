import AppIntents
import Foundation

// Pay Gate shortcut with target app parameter using modern dynamic foreground mode

@available(iOS 17.0, *)
struct PayGateIntent: AppIntent {
    static var title: LocalizedStringResource = "Steps Trader: –æ—Ç–∫—Ä—ã—Ç—å Pay Gate"
    static var description = IntentDescription("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (Instagram/TikTok). –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —ç–∫—Ä–∞–Ω –æ–ø–ª–∞—Ç—ã —à–∞–≥–∞–º–∏")
    static var openAppWhenRun: Bool = true

    @Parameter(title: "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    var target: TargetApp

    func perform() async throws -> some IntentResult {
        let userDefaults = UserDefaults.stepsTrader()
        let now = Date()
        
        print("üîç PayGateIntent triggered for \(target.bundleId) at \(now)")
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è –ª–∏ —à–æ—Ä—Ç–∫–∞—Ç –Ω–µ–¥–∞–≤–Ω–æ
        if let lastTriggerTime = userDefaults.object(forKey: "lastShortcutTriggerTime") as? Date {
            let timeSinceLastTrigger = now.timeIntervalSince(lastTriggerTime)
            print("‚è∞ Time since last shortcut trigger: \(timeSinceLastTrigger) seconds")
            
            // –ï—Å–ª–∏ —à–æ—Ä—Ç–∫–∞—Ç –∑–∞–ø—É—Å–∫–∞–ª—Å—è –º–µ–Ω–µ–µ 10 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            if timeSinceLastTrigger < 10.0 {
                print("üö´ Shortcut called too soon, ignoring to prevent loop")
                return .result()
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ —à–æ—Ä—Ç–∫–∞—Ç–∞
        userDefaults.set(now, forKey: "lastShortcutTriggerTime")
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        userDefaults.set(target.bundleId, forKey: "shortcutTargetBundleId")
        userDefaults.set(now, forKey: "shortcutTriggerTime")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —à–∞–≥–æ–≤
        let stepsBalance = userDefaults.integer(forKey: "stepsBalance")
        let entryCost = userDefaults.integer(forKey: "entryCostSteps")
        
        print("üí∞ Steps balance: \(stepsBalance), Entry cost: \(entryCost)")
        
        if stepsBalance >= entryCost {
            // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∞–≥–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Pay Gate
            userDefaults.set(true, forKey: "shouldShowFocusGate")
            userDefaults.set(target.bundleId, forKey: "focusGateTargetBundleId")
            
            return .result()
        } else {
            // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∞–≥–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            let needed = entryCost - stepsBalance
            userDefaults.set("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∞–≥–æ–≤. –ù—É–∂–Ω–æ –µ—â–µ: \(needed) —à–∞–≥–æ–≤.", forKey: "shortcutMessage")
            userDefaults.set(false, forKey: "shouldShowFocusGate")
            
            return .result()
        }
    }
}

@available(iOS 17.0, *)
enum TargetApp: String, AppEnum, CaseDisplayRepresentable {
    case instagram
    case tiktok

    static var typeDisplayRepresentation: TypeDisplayRepresentation = "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"

    static var caseDisplayRepresentations: [TargetApp: DisplayRepresentation] = [
        .instagram: "üì± Instagram",
        .tiktok: "üéµ TikTok"
    ]

    var bundleId: String {
        switch self {
        case .instagram: return "com.burbn.instagram"
        case .tiktok: return "com.zhiliaoapp.musically"
        }
    }
}