import Foundation
import Combine

final class BudgetEngine: ObservableObject, BudgetEngineProtocol {
    @Published var tariff: Tariff {
        didSet {
            UserDefaults.standard.set(tariff.rawValue, forKey: "selectedTariff")
            print("üí∞ Tariff updated to: \(tariff.displayName) (\(Int(tariff.stepsPerMinute)) steps/min)")
        }
    }
    
    var stepsPerMinute: Double { tariff.stepsPerMinute }
    
    // Backward compatibility
    var difficultyLevel: DifficultyLevel {
        get { tariff }
        set { tariff = newValue }
    }
    
    @Published private(set) var todayAnchor: Date
    @Published private(set) var dailyBudgetMinutes: Int = 0
    @Published private(set) var remainingMinutes: Int = 0

    private var sharedDefaults: UserDefaults { UserDefaults.stepsTrader() }

    init() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º medium –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        let savedTariffString = UserDefaults.standard.string(forKey: "selectedTariff") ?? Tariff.medium.rawValue
        self.tariff = Tariff(rawValue: savedTariffString) ?? .medium
        
        // –ß–∏—Ç–∞–µ–º –∏–∑ App Group, fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        let g = UserDefaults.stepsTrader()
        let savedAnchor = (g.object(forKey: "todayAnchor") as? Date)
            ?? (UserDefaults.standard.object(forKey: "todayAnchor") as? Date)
            ?? Calendar.current.startOfDay(for: Date())
        self.todayAnchor = savedAnchor
        
        let savedDaily = (g.object(forKey: "dailyBudgetMinutes") as? Int)
        ?? g.integer(forKey: "dailyBudgetMinutes")
        let savedRemaining = (g.object(forKey: "remainingMinutes") as? Int)
        ?? g.integer(forKey: "remainingMinutes")
        self.dailyBudgetMinutes = savedDaily
        self.remainingMinutes = savedRemaining
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å
        if !Calendar.current.isDateInToday(savedAnchor) { 
            resetForToday() 
        }
        
        print("üí∞ BudgetEngine initialized with tariff: \(tariff.displayName)")
    }

    func minutes(from steps: Double) -> Int { max(0, Int(steps / stepsPerMinute)) }

    func setBudget(minutes: Int) {
        dailyBudgetMinutes = minutes
        remainingMinutes = minutes
        persist()
    }

    func consume(mins: Int) {
        remainingMinutes = max(0, remainingMinutes - mins)
        persist()
    }

    func resetIfNeeded() {
        if !Calendar.current.isDateInToday(todayAnchor) { resetForToday() }
    }

    private func resetForToday() {
        todayAnchor = Calendar.current.startOfDay(for: Date())
        dailyBudgetMinutes = 0
        remainingMinutes = 0
        persist()
    }

    func updateTariff(_ newTariff: Tariff) {
        print("üí∞ Updating tariff from \(tariff.displayName) to \(newTariff.displayName)")
        tariff = newTariff
    }
    
    private func persist() {
        // –ü–∏—à–µ–º –≤ App Group, –∞ —Ç–∞–∫–∂–µ –¥—É–±–ª–∏—Ä—É–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        let g = sharedDefaults
        g.set(todayAnchor, forKey: "todayAnchor")
        g.set(dailyBudgetMinutes, forKey: "dailyBudgetMinutes")
        g.set(remainingMinutes, forKey: "remainingMinutes")
        
        let d = UserDefaults.standard
        d.set(todayAnchor, forKey: "todayAnchor")
        d.set(dailyBudgetMinutes, forKey: "dailyBudgetMinutes")
        d.set(remainingMinutes, forKey: "remainingMinutes")
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ App Group (–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ —Å–Ω–∏–ø–ø–µ—Ç–æ–º/–∏–Ω—Ç–µ–Ω—Ç–æ–º)
    func reloadFromStorage() {
        let g = UserDefaults.stepsTrader()
        if let anchor = g.object(forKey: "todayAnchor") as? Date {
            todayAnchor = anchor
        }
        dailyBudgetMinutes = g.integer(forKey: "dailyBudgetMinutes")
        remainingMinutes = g.integer(forKey: "remainingMinutes")
        print("üîÑ BudgetEngine reloaded: daily=\(dailyBudgetMinutes), remaining=\(remainingMinutes)")
    }
}
