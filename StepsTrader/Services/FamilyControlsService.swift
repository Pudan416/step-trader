import FamilyControls
import Combine
import ManagedSettings
import DeviceActivity
import Foundation

@MainActor
final class FamilyControlsService: ObservableObject, FamilyControlsServiceProtocol {
    @Published var selection = FamilyActivitySelection()
    @Published var isAuthorized = false
    
    let store = ManagedSettingsStore()
    private let center = DeviceActivityCenter()
    
    init() {
        checkAuthorizationStatus()
        
        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if AuthorizationCenter.shared.authorizationStatus == .notDetermined {
            Task {
                do {
                    try await requestAuthorization()
                    print("‚úÖ Auto-authorization request completed")
                } catch {
                    print("‚ö†Ô∏è Auto-authorization failed: \(error)")
                }
            }
        }
    }
    
    func requestAuthorization() async throws {
        print("üîê Steps Trader: Requesting Family Controls authorization...")
        print("üì± Current authorization status: \(AuthorizationCenter.shared.authorizationStatus)")
        
        #if targetEnvironment(simulator)
        print("‚ùå –°–ò–ú–£–õ–Ø–¢–û–† –û–ë–ù–ê–†–£–ñ–ï–ù! Family Controls –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ!")
        print("üì± –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –†–ï–ê–õ–¨–ù–û–ú –£–°–¢–†–û–ô–°–¢–í–ï –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Family Controls")
        throw FamilyControlsError.simulatorNotSupported
        #endif
        
        switch AuthorizationCenter.shared.authorizationStatus {
        case .notDetermined:
            print("üîê Requesting authorization for first time...")
            try await AuthorizationCenter.shared.requestAuthorization(for: .individual)
            print("‚úÖ Authorization request completed")
        case .denied:
            print("‚ùå Authorization was denied by user")
            throw FamilyControlsError.notAuthorized
        case .approved:
            print("‚úÖ Already authorized")
            break
        @unknown default:
            print("‚ö†Ô∏è Unknown authorization status")
            break
        }
        
        await MainActor.run {
            checkAuthorizationStatus()
        }
    }
    
    private func checkAuthorizationStatus() {
        let status = AuthorizationCenter.shared.authorizationStatus
        isAuthorized = status == .approved
        
        print("üîê Steps Trader: Detailed Family Controls status:")
        print("   Raw status: \(status)")
        switch status {
        case .notDetermined:
            print("   ‚ùì Not determined - authorization not requested yet")
        case .denied:
            print("   ‚ùå Denied - user declined or restrictions in place")
        case .approved:
            print("   ‚úÖ Approved - fully authorized")
        @unknown default:
            print("   ‚ö†Ô∏è Unknown status: \(status)")
        }
        print("   isAuthorized: \(isAuthorized)")
        
        #if targetEnvironment(simulator)
        print("   üì± RUNNING IN SIMULATOR - Family Controls will NOT work!")
        #else
        print("   üì± Running on real device - Family Controls should work")
        #endif
    }
    
    func startMonitoring(budgetMinutes: Int) {
        guard isAuthorized else {
            print("‚ùå Cannot start monitoring: not authorized")
            return
        }
        
        print("üöÄ Starting Device Activity monitoring for \(budgetMinutes) minutes")
        print("üì± Selected applications: \(selection.applicationTokens.count)")
        print("üìÇ Selected categories: \(selection.categoryTokens.count)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —á—Ç–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å
        guard !selection.applicationTokens.isEmpty || !selection.categoryTokens.isEmpty else {
            print("‚ùå Cannot start monitoring: no applications or categories selected")
            return
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        UserDefaults(suiteName: "group.personal-project.StepsTrader")?.set(selection.applicationTokens.count, forKey: "selectedAppsCount")
        UserDefaults(suiteName: "group.personal-project.StepsTrader")?.set(selection.categoryTokens.count, forKey: "selectedCategoriesCount")
        UserDefaults(suiteName: "group.personal-project.StepsTrader")?.set(budgetMinutes, forKey: "budgetMinutes")
        UserDefaults(suiteName: "group.personal-project.StepsTrader")?.set(Date(), forKey: "monitoringStartTime")
        print("üìù Saved monitoring metadata: \(selection.applicationTokens.count) apps, \(selection.categoryTokens.count) categories, budget: \(budgetMinutes) min, start time: \(Date())")
        
        // –¢–æ–∫–µ–Ω—ã –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ DeviceActivityEvent
        print("üí° Tokens will be passed through DeviceActivityEvent")
        
        // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å –¥–Ω—è (—Å —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è)
        let now = Date()
        let calendar = Calendar.current
        let startComponents = calendar.dateComponents([.hour, .minute], from: now)
        let endComponents = DateComponents(hour: 23, minute: 59)
        
        let schedule = DeviceActivitySchedule(
            intervalStart: startComponents,
            intervalEnd: endComponents,
            repeats: false
        )
        
        print("üìÖ Schedule: \(startComponents.hour ?? 0):\(startComponents.minute ?? 0) to 23:59")
        
        // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —Å –ª–∏–º–∏—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
        var event: DeviceActivityEvent
        
        if !selection.applicationTokens.isEmpty {
            // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            event = DeviceActivityEvent(
                applications: selection.applicationTokens,
                threshold: DateComponents(minute: budgetMinutes)
            )
            print("üì± Monitoring specific applications: \(selection.applicationTokens.count)")
        } else if !selection.categoryTokens.isEmpty {
            // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
            event = DeviceActivityEvent(
                categories: selection.categoryTokens,
                threshold: DateComponents(minute: budgetMinutes)
            )
            print("üìÇ Monitoring categories: \(selection.categoryTokens.count)")
        } else {
            print("‚ùå No applications or categories to monitor")
            return
        }
        
        print("‚è±Ô∏è Event threshold: \(budgetMinutes) minutes")
        
        let events: [DeviceActivityEvent.Name: DeviceActivityEvent] = [
            DeviceActivityEvent.Name("dailyLimit"): event
        ]
        
        do {
            try center.startMonitoring(DeviceActivityName("daily"), during: schedule, events: events)
            print("‚úÖ Device Activity monitoring started successfully")
            print("üîç Monitor name: 'daily', Event name: 'dailyLimit'")
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            print("üîç DIAGNOSTIC INFO:")
            print("   - Budget minutes: \(budgetMinutes)")
            print("   - Applications count: \(selection.applicationTokens.count)")
            print("   - Categories count: \(selection.categoryTokens.count)")
            print("   - Schedule: \(startComponents.hour ?? 0):\(startComponents.minute ?? 0) - 23:59")
            print("   - Current time: \(Date())")
            
            #if targetEnvironment(simulator)
            print("‚ö†Ô∏è WARNING: Running in SIMULATOR - DeviceActivity will NOT work!")
            print("üì± Please test on a REAL DEVICE for DeviceActivity to function")
            #else
            print("üì± Running on real device - DeviceActivity should work")
            #endif
            
        } catch {
            print("‚ùå Failed to start monitoring: \(error)")
            print("   Error details: \(error.localizedDescription)")
            print("   Error type: \(type(of: error))")
        }
    }
    
    
    func stopMonitoring() {
        print("üõë Stopping Device Activity monitoring")
        center.stopMonitoring([DeviceActivityName("daily")])
        
        // –°–Ω–∏–º–∞–µ–º –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        store.clearAllSettings()
    }
    
    func enableShield() {
        guard isAuthorized else { return }
        
        print("üõ°Ô∏è Enabling shield for selected applications")
        store.shield.applications = selection.applicationTokens
    }
    
    func disableShield() {
        print("üîì Disabling shield")
        store.clearAllSettings()
    }
    
    func updateSelection(_ newSelection: FamilyActivitySelection) {
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –≤—ã–∑–æ–≤–æ–≤
        // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ AppModel –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–æ–≤
        DispatchQueue.main.async { [weak self] in
            self?.selection = newSelection
            print("üì± Service selection updated: \(newSelection.applicationTokens.count) apps, \(newSelection.categoryTokens.count) categories")
        }
    }
    
    func checkDeviceActivityStatus() {
        print("üîç DEVICE ACTIVITY DIAGNOSTIC:")
        print("   - Family Controls authorized: \(isAuthorized)")
        print("   - Application tokens: \(selection.applicationTokens.count)")
        print("   - Category tokens: \(selection.categoryTokens.count)")
        
        #if targetEnvironment(simulator)
        print("   - ‚ö†Ô∏è RUNNING IN SIMULATOR - DeviceActivity WILL NOT WORK!")
        print("   - üì± MUST TEST ON REAL DEVICE for DeviceActivity to function")
        #else
        print("   - ‚úÖ Running on real device - DeviceActivity should work")
        #endif
        
        let userDefaults = UserDefaults(suiteName: "group.personal-project.StepsTrader")
        let budgetMinutes = userDefaults?.object(forKey: "budgetMinutes") as? Int ?? 0
        let startTime = userDefaults?.object(forKey: "monitoringStartTime") as? Date
        
        print("   - Saved budget minutes: \(budgetMinutes)")
        print("   - Monitoring start time: \(startTime?.description ?? "none")")
        
        if !selection.applicationTokens.isEmpty || !selection.categoryTokens.isEmpty {
            print("   - ‚úÖ Has valid selection for monitoring")
        } else {
            print("   - ‚ùå NO SELECTION - Cannot monitor without apps or categories")
        }
    }
}

enum FamilyControlsError: Error, LocalizedError {
    case notAuthorized
    case simulatorNotSupported
    
    var errorDescription: String? {
        switch self {
        case .notAuthorized:
            return "Family Controls –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
        case .simulatorNotSupported:
            return "Family Controls –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ."
        }
    }
}
