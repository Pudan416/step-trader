import Foundation
import Combine
import SwiftUI
import HealthKit
import FamilyControls
import DeviceActivity
import ManagedSettings
import UserNotifications
import AVFoundation
import AudioToolbox
import UIKit

// MARK: - AppModel
@MainActor
final class AppModel: ObservableObject {
    // Dependencies
    private let healthKitService: any HealthKitServiceProtocol
    let familyControlsService: any FamilyControlsServiceProtocol
    private let notificationService: any NotificationServiceProtocol
    private let budgetEngine: any BudgetEngineProtocol
    
    // Published properties
    @Published var stepsToday: Double = 0
    @Published var spentSteps: Int = 0
    @Published var spentMinutes: Int = 0  // –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    @Published var isTrackingTime = false
    @Published var isBlocked = false  // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —ç–∫—Ä–∞–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    @Published var message: String?
    @Published var currentSessionElapsed: Int?
    
    // Budget properties that mirror BudgetEngine for UI updates
    @Published var dailyBudgetMinutes: Int = 0
    @Published var remainingMinutes: Int = 0
    // Focus-gate state
    @Published var showFocusGate: Bool = false
    @Published var focusGateTargetBundleId: String? = nil
    @Published var showQuickStatusPage = false  // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    @Published var appSelection = FamilyActivitySelection() {
        didSet {
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å FamilyControlsService —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if appSelection.applicationTokens != oldValue.applicationTokens || 
               appSelection.categoryTokens != oldValue.categoryTokens {
                syncAppSelectionToService()
                saveAppSelection() // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            }
        }
    }
    
    @Published var isInstagramSelected: Bool = false {
        didSet {
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏—é
            guard !isUpdatingInstagramSelection else { return }
            
            UserDefaults.standard.set(isInstagramSelected, forKey: "isInstagramSelected")
            if isInstagramSelected {
                setInstagramAsTarget()
            } else {
                clearAppSelection()
            }
        }
    }
    
    // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–µ–∫—É—Ä—Å–∏–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Instagram selection
    private var isUpdatingInstagramSelection = false
    
    private var startTime: Date?
    private var timer: Timer?

    init(
        healthKitService: any HealthKitServiceProtocol,
        familyControlsService: any FamilyControlsServiceProtocol,
        notificationService: any NotificationServiceProtocol,
        budgetEngine: any BudgetEngineProtocol
    ) {
        self.healthKitService = healthKitService
        self.familyControlsService = familyControlsService
        self.notificationService = notificationService
        self.budgetEngine = budgetEngine
        
        // Initialize budget properties
        self.dailyBudgetMinutes = budgetEngine.dailyBudgetMinutes
        self.remainingMinutes = budgetEngine.remainingMinutes
        
        print("üéØ AppModel initialized with dependencies")
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Instagram
        self.isInstagramSelected = UserDefaults.standard.bool(forKey: "isInstagramSelected")
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ –≤—ã–∑–æ–≤–∞ didSet
        DispatchQueue.main.async { [weak self] in
            guard let self = self else { return }
            
            // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
            self.loadAppSelection()
            
            // –ó–∞—Ç–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å FamilyControlsService
            if self.appSelection.applicationTokens.isEmpty && self.appSelection.categoryTokens.isEmpty {
                self.appSelection = self.familyControlsService.selection
            }
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self.loadSpentTime()
            print("üîÑ Initial sync: \(self.appSelection.applicationTokens.count) apps")
        }
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º —Ü–∏–∫–ª–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        setupAppLifecycleObservers()

        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¥–∞—Ä–≤–∏–Ω–æ–≤—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–Ω–∏–ø–ø–µ—Ç–∞/–∏–Ω—Ç–µ–Ω—Ç–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ observer)
        CFNotificationCenterAddObserver(
            CFNotificationCenterGetDarwinNotifyCenter(),
            Unmanaged.passUnretained(self).toOpaque(),
            { _, observer, name, _, _ in
                guard let observer = observer, let name = name else { return }
                let `self` = Unmanaged<AppModel>.fromOpaque(observer).takeUnretainedValue()
                if name.rawValue as String == "com.steps.trader.refresh" {
                    Task { @MainActor in
                        await `self`.recalcSilently()
                        `self`.loadSpentTime()
                    }
                }
            },
            "com.steps.trader.refresh" as CFString,
            nil,
            .deliverImmediately
        )
    }

    // MARK: - Focus Gate handlers
    func handleIncomingURL(_ url: URL) {
        // –ø–æ–¥–¥–µ—Ä–∂–∫–∞: steps-trader://focus?target=instagram | myfocusapp://guard?target=instagram
        let isFocus = (url.host == "focus" || url.path.contains("focus"))
        let isGuard = (url.host == "guard" || url.path.contains("guard"))
        guard isFocus || isGuard else { return }
        let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
        let target = components?.queryItems?.first(where: { $0.name == "target" })?.value
        var bundleId: String? = target
        if let t = target, !t.contains(".") {
            // –º–∞–ø–ø–∏–Ω–≥ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–º–µ–Ω–∏ –≤ bundle id
            switch t.lowercased() {
            case "instagram": bundleId = "com.burbn.instagram"
            case "tiktok": bundleId = "com.zhiliaoapp.musically"
            case "youtube": bundleId = "com.google.ios.youtube"
            default: break
            }
        }
        focusGateTargetBundleId = bundleId
        print("üéØ Deeplink: host=\(url.host ?? "nil") target=\(bundleId ?? "nil")")

        // –ï—Å–ª–∏ guard-—Ä–µ–∂–∏–º: —Å—Ä–∞–∑—É –≤–∫–ª—é—á–∞–µ–º shielding –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Üí iOS –ø–æ–∫–∞–∂–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é —à—Ç–æ—Ä–∫—É
        if isGuard, let familyService = familyControlsService as? FamilyControlsService {
            // –í–∫–ª—é—á–∞–µ–º —â–∏—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ selection (–æ–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
            familyService.enableShield()
            // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å target –¥–ª—è –≤—ã–∑–æ–≤–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π —à—Ç–æ—Ä–∫–∏
            if let bid = bundleId {
                let scheme: String
                switch bid {
                case "com.burbn.instagram": scheme = "instagram://"
                case "com.zhiliaoapp.musically": scheme = "tiktok://"
                case "com.google.ios.youtube": scheme = "youtube://"
                default: scheme = ""
                }
                if let url = URL(string: scheme), !scheme.isEmpty { UIApplication.shared.open(url) }
            }
            return
        }

        // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—à–∏ —Ñ–æ–∫—É—Å-–≤–æ—Ä–æ—Ç–∞ (–≤–∏–∑—É–∞–ª—å–Ω–∞—è —à—Ç–æ—Ä–∫–∞) —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–∫—Ä—ã—Ç—å"
        showFocusGate = bundleId != nil
        print("üéØ FocusGate: target=\(focusGateTargetBundleId ?? "nil") show=\(showFocusGate)")
        if let engine = budgetEngine as? BudgetEngine { engine.reloadFromStorage() }
    }
    
    private func setupAppLifecycleObservers() {
        // –ö–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Ö–æ–¥–∏—Ç –≤ —Ñ–æ–Ω
        NotificationCenter.default.addObserver(
            forName: UIApplication.didEnterBackgroundNotification,
            object: nil,
            queue: .main
        ) { [weak self] _ in
            guard let strongSelf = self else { return }
            Task { @MainActor in
                strongSelf.handleAppDidEnterBackground()
            }
        }
        
        // –ö–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω
        NotificationCenter.default.addObserver(
            forName: UIApplication.willEnterForegroundNotification,
            object: nil,
            queue: .main
        ) { [weak self] _ in
            guard let strongSelf = self else { return }
            Task { @MainActor in
                strongSelf.handleAppWillEnterForeground()
            }
        }
    }
    
    private func handleAppDidEnterBackground() {
        print("üì± App entered background - timer will be suspended")
        if isTrackingTime {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —É—Ö–æ–¥–∞ –≤ —Ñ–æ–Ω
            UserDefaults.standard.set(Date(), forKey: "backgroundTime")
            print("üíæ Saved background time for tracking calculation")
        }
    }
    
    private func handleAppWillEnterForeground() {
        print("üì± App entering foreground - checking elapsed time")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ –≤ —Ñ–æ–Ω–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ)
        if isTrackingTime {
        if let backgroundTime = UserDefaults.standard.object(forKey: "backgroundTime") as? Date {
            let elapsedSeconds = Date().timeIntervalSince(backgroundTime)
            let elapsedMinutes = Int(elapsedSeconds / 60)
            
            if elapsedMinutes > 0 {
                print("‚è∞ App was in background for \(elapsedMinutes) minutes")
                
                // –°–∏–º—É–ª–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞ –≤—Ä–µ–º—è –≤ —Ñ–æ–Ω–µ
                for _ in 0..<elapsedMinutes {
                    guard remainingMinutes > 0 else {
                        // –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ –ø–æ–∫–∞ –±—ã–ª–∏ –≤ —Ñ–æ–Ω–µ
                        stopTracking()
                        isBlocked = true
                        message = "‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ –ø–æ–∫–∞ –≤—ã –±—ã–ª–∏ –≤–Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!"
                        
                        if let familyService = familyControlsService as? FamilyControlsService {
                            familyService.enableShield()
                        }
                        
                        notificationService.sendTimeExpiredNotification()
                        sendReturnToAppNotification()
                        AudioServicesPlaySystemSound(1005)
                        break
                    }
                    
                    updateSpentTime(minutes: spentMinutes + 1)
                    consumeMinutes(1)
                }
                
                print("‚è±Ô∏è Updated: spent \(spentMinutes) min, remaining \(remainingMinutes) min")
            }
            
            UserDefaults.standard.removeObject(forKey: "backgroundTime")
        }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å Quick Status Page (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç tracking)
        checkForQuickStatusPage()
    }
    
    // Convenience computed properties for backward compatibility
    var budget: any BudgetEngineProtocol { budgetEngine }
    var family: any FamilyControlsServiceProtocol { familyControlsService }
    
    // MARK: - Budget Sync
    private func syncBudgetProperties() {
        dailyBudgetMinutes = budgetEngine.dailyBudgetMinutes
        remainingMinutes = budgetEngine.remainingMinutes
    }
    
    private func syncAppSelectionToService() {
        print("üîÑ Syncing app selection to service: \(appSelection.applicationTokens.count) apps, \(appSelection.categoryTokens.count) categories")
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        var finalSelection = appSelection
        
        if appSelection.applicationTokens.count > 1 {
            finalSelection = FamilyActivitySelection()
            if let firstApp = appSelection.applicationTokens.first {
                finalSelection.applicationTokens.insert(firstApp)
            }
            print("üîÑ Limited to first app")
        } else if appSelection.categoryTokens.count > 1 {
            finalSelection = FamilyActivitySelection()
            if let firstCategory = appSelection.categoryTokens.first {
                finalSelection.categoryTokens.insert(firstCategory)
            }
            print("üîÑ Limited to first category")
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –≤—ã–∑–æ–≤–∞ updateSelection (–∏–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–æ–≤)
        DispatchQueue.main.async { [weak self] in
            guard let self = self else { return }
            (self.familyControlsService as? FamilyControlsService)?.selection = finalSelection
            print("‚úÖ Service updated with \(finalSelection.applicationTokens.count) apps")
        }
    }

    private func loadSpentTime() {
        let userDefaults = UserDefaults.stepsTrader()
        let savedSpentMinutes = userDefaults.integer(forKey: "spentMinutes")
        let savedDate = userDefaults.object(forKey: "spentTimeDate") as? Date ?? Date()
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –µ—Å–ª–∏ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å
        if !Calendar.current.isDate(savedDate, inSameDayAs: Date()) {
            spentMinutes = 0
            spentSteps = 0
            saveSpentTime()
            print("üîÑ Reset spent time for new day")
        } else {
            spentMinutes = savedSpentMinutes
            spentSteps = spentMinutes * Int(budgetEngine.stepsPerMinute)
            syncBudgetProperties() // Sync budget properties for UI updates
            print("üìä Loaded spent time: \(spentMinutes) minutes, \(spentSteps) steps")
        }
    }
    
    private func saveSpentTime() {
        let userDefaults = UserDefaults.stepsTrader()
        userDefaults.set(spentMinutes, forKey: "spentMinutes")
        userDefaults.set(Date(), forKey: "spentTimeDate")
        print("üíæ Saved spent time: \(spentMinutes) minutes")
    }
    
    func updateSpentTime(minutes: Int) {
        spentMinutes = minutes
        spentSteps = spentMinutes * Int(budgetEngine.stepsPerMinute)
        saveSpentTime()
        syncBudgetProperties() // Sync budget properties for UI updates
        print("üïê Updated spent time: \(spentMinutes) minutes (\(spentSteps) steps)")
    }
    
    func consumeMinutes(_ minutes: Int) {
        budgetEngine.consume(mins: minutes)
        syncBudgetProperties() // Sync budget properties for UI updates
        print("‚è±Ô∏è Consumed \(minutes) minutes, remaining: \(remainingMinutes)")
    }
    
    // MARK: - App Selection Persistence
    
    private func saveAppSelection() {
        let userDefaults = UserDefaults.stepsTrader()
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ApplicationTokens
        if !appSelection.applicationTokens.isEmpty {
            do {
                let tokensData = try NSKeyedArchiver.archivedData(withRootObject: appSelection.applicationTokens, requiringSecureCoding: true)
                userDefaults.set(tokensData, forKey: "persistentApplicationTokens")
                print("üíæ Saved app selection: \(appSelection.applicationTokens.count) apps")
            } catch {
                print("‚ùå Failed to save app selection: \(error)")
            }
        } else {
            userDefaults.removeObject(forKey: "persistentApplicationTokens")
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º CategoryTokens
        if !appSelection.categoryTokens.isEmpty {
            do {
                let categoriesData = try NSKeyedArchiver.archivedData(withRootObject: appSelection.categoryTokens, requiringSecureCoding: true)
                userDefaults.set(categoriesData, forKey: "persistentCategoryTokens")
                print("üíæ Saved category selection: \(appSelection.categoryTokens.count) categories")
            } catch {
                print("‚ùå Failed to save category selection: \(error)")
            }
        } else {
            userDefaults.removeObject(forKey: "persistentCategoryTokens")
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        userDefaults.set(Date(), forKey: "appSelectionSavedDate")
    }
    
    private func loadAppSelection() {
        let userDefaults = UserDefaults.stepsTrader()
        var hasSelection = false
        var newSelection = FamilyActivitySelection()
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ApplicationTokens
        if let tokensData = userDefaults.data(forKey: "persistentApplicationTokens") {
            do {
                let obj = try NSKeyedUnarchiver.unarchivedObject(ofClass: NSSet.self, from: tokensData)
                if let applicationTokens = obj as? Set<ApplicationToken> {
                    newSelection.applicationTokens = applicationTokens
                    hasSelection = true
                    print("üì± Restored app selection: \(applicationTokens.count) apps")
                }
            } catch {
                print("‚ùå Failed to restore app selection: \(error)")
            }
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CategoryTokens
        if let categoriesData = userDefaults.data(forKey: "persistentCategoryTokens") {
            do {
                let obj = try NSKeyedUnarchiver.unarchivedObject(ofClass: NSSet.self, from: categoriesData)
                if let categoryTokens = obj as? Set<ActivityCategoryToken> {
                    newSelection.categoryTokens = categoryTokens
                    hasSelection = true
                    print("üì± Restored category selection: \(categoryTokens.count) categories")
                }
            } catch {
                print("‚ùå Failed to restore category selection: \(error)")
            }
        }
        
        if hasSelection {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±–æ—Ä –±–µ–∑ –≤—ã–∑–æ–≤–∞ didSet (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
            self.appSelection = newSelection
            print("‚úÖ App selection restored successfully")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            if let savedDate = userDefaults.object(forKey: "appSelectionSavedDate") as? Date {
                let formatter = DateFormatter()
                formatter.dateStyle = .medium
                formatter.timeStyle = .short
                print("üìÖ App selection was saved on: \(formatter.string(from: savedDate))")
            }
        } else {
            print("üì± No saved app selection found")
        }
    }
    
    func runDiagnostics() {
        print("üîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê FAMILY CONTROLS ===")
        
        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if let familyService = familyControlsService as? FamilyControlsService {
            familyService.checkAuthorizationStatus()
        }
        
        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        print("üì± –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
        print("   - ApplicationTokens: \(appSelection.applicationTokens.count)")
        print("   - CategoryTokens: \(appSelection.categoryTokens.count)")
        
        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—é–¥–∂–µ—Ç–∞
        print("üí∞ –ë—é–¥–∂–µ—Ç:")
        print("   - –í—Å–µ–≥–æ –º–∏–Ω—É—Ç: \(budgetEngine.dailyBudgetMinutes)")
        print("   - –û—Å—Ç–∞–ª–æ—Å—å –º–∏–Ω—É—Ç: \(budgetEngine.remainingMinutes)")
        print("   - –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –º–∏–Ω—É—Ç: \(spentMinutes)")
        
        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        print("‚è±Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:")
        print("   - –ê–∫—Ç–∏–≤–Ω–æ: \(isTrackingTime)")
        print("   - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: \(isBlocked)")
        
        // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ UserDefaults
        let userDefaults = UserDefaults.stepsTrader()
        print("üíæ Shared UserDefaults:")
        print("   - Budget minutes: \(userDefaults.object(forKey: "budgetMinutes") ?? "nil")")
        print("   - Spent minutes: \(userDefaults.object(forKey: "spentMinutes") ?? "nil")")
        print("   - Monitoring start: \(userDefaults.object(forKey: "monitoringStartTime") ?? "nil")")
        
        // 6. DeviceActivity –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        if let familyService = familyControlsService as? FamilyControlsService {
            familyService.checkDeviceActivityStatus()
        }
        
        message = "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å Xcode –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
    }
    
    func resetStatistics() {
        print("üîÑ === –°–ë–†–û–° –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===")
        
        // 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ
        if isTrackingTime {
            stopTracking()
        }
        
        // 2. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        spentMinutes = 0
        spentSteps = 0
        isBlocked = false
        currentSessionElapsed = nil
        
        // 3. –û—á–∏—â–∞–µ–º UserDefaults (App Group)
        let userDefaults = UserDefaults.stepsTrader()
        userDefaults.removeObject(forKey: "spentMinutes")
        userDefaults.removeObject(forKey: "spentTimeDate")
        userDefaults.removeObject(forKey: "budgetMinutes")
        userDefaults.removeObject(forKey: "monitoringStartTime")
        userDefaults.removeObject(forKey: "selectedAppsCount")
        userDefaults.removeObject(forKey: "selectedCategoriesCount")
        userDefaults.removeObject(forKey: "selectedApplicationTokens")
        userDefaults.removeObject(forKey: "persistentApplicationTokens")
        userDefaults.removeObject(forKey: "persistentCategoryTokens")
        userDefaults.removeObject(forKey: "appSelectionSavedDate")
        print("üíæ –û—á–∏—â–µ–Ω—ã App Group UserDefaults")
        
        // 4. –û—á–∏—â–∞–µ–º –æ–±—ã—á–Ω—ã–µ UserDefaults
        UserDefaults.standard.removeObject(forKey: "dailyBudgetMinutes")
        UserDefaults.standard.removeObject(forKey: "remainingMinutes")
        UserDefaults.standard.removeObject(forKey: "todayAnchor")
        print("üíæ –û—á–∏—â–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ UserDefaults")
        
        // 5. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±—é–¥–∂–µ—Ç –≤—Ä—É—á–Ω—É—é (—Ç–∞–∫ –∫–∞–∫ resetForToday –ø—Ä–∏–≤–∞—Ç–Ω—ã–π)
        let todayStart = Calendar.current.startOfDay(for: Date())
        UserDefaults.standard.set(todayStart, forKey: "todayAnchor")
        UserDefaults.standard.set(0, forKey: "dailyBudgetMinutes")
        UserDefaults.standard.set(0, forKey: "remainingMinutes")
        print("üí∞ –°–±—Ä–æ—à–µ–Ω –±—é–¥–∂–µ—Ç")
        
        // 6. –°–Ω–∏–º–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if let familyService = familyControlsService as? FamilyControlsService {
            familyService.stopMonitoring()
            familyService.disableShield()
            print("üõ°Ô∏è –û—Ç–∫–ª—é—á–µ–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
        }
        
        // 7. –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (–∫–∞–∫ –≤—ã–±–æ—Ä, —Ç–∞–∫ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        appSelection = FamilyActivitySelection()
        print("üì± –û—á–∏—â–µ–Ω –≤—ã–±–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        // 8. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±—é–¥–∂–µ—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ —à–∞–≥–∞–º–∏
        Task {
            do {
                stepsToday = try await healthKitService.fetchTodaySteps()
                let mins = budgetEngine.minutes(from: stepsToday)
                budgetEngine.setBudget(minutes: mins)
                syncBudgetProperties() // Sync budget properties for UI updates
                message = "üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞! –ù–æ–≤—ã–π –±—é–¥–∂–µ—Ç: \(mins) –º–∏–Ω—É—Ç –∏–∑ \(Int(stepsToday)) —à–∞–≥–æ–≤"
                print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –ù–æ–≤—ã–π –±—é–¥–∂–µ—Ç: \(mins) –º–∏–Ω—É—Ç")
        } catch {
                message = "üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞, –Ω–æ –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–≥–æ–≤: \(error.localizedDescription)"
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —à–∞–≥–æ–≤: \(error)")
            }
        }
        
        print("‚úÖ === –°–ë–†–û–° –ó–ê–í–ï–†–®–ï–ù ===")
    }
    
    private func sendReturnToAppNotification() {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        DispatchQueue.main.asyncAfter(deadline: .now() + 30) { [weak self] in
            self?.scheduleReturnNotification()
        }
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        DispatchQueue.main.asyncAfter(deadline: .now() + 300) { [weak self] in
            self?.schedulePeriodicNotifications()
        }
    }
    
    private func scheduleReturnNotification() {
        let content = UNMutableNotificationContent()
        content.title = "üö∂‚Äç‚ôÇÔ∏è Steps Trader"
        content.body = "–°–¥–µ–ª–∞–π—Ç–µ –±–æ–ª—å—à–µ —à–∞–≥–æ–≤, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π!"
        content.sound = .default
        content.badge = 1
        
        // –î–æ–±–∞–≤–ª—è–µ–º action –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        let returnAction = UNNotificationAction(
            identifier: "RETURN_TO_APP",
            title: "–û—Ç–∫—Ä—ã—Ç—å Steps Trader",
            options: [.foreground]
        )
        
        let category = UNNotificationCategory(
            identifier: "STEPS_REMINDER",
            actions: [returnAction],
            intentIdentifiers: [],
            options: []
        )
        
        UNUserNotificationCenter.current().setNotificationCategories([category])
        content.categoryIdentifier = "STEPS_REMINDER"
        
        let request = UNNotificationRequest(
            identifier: "stepsReminder-\(UUID().uuidString)",
            content: content,
            trigger: UNTimeIntervalNotificationTrigger(timeInterval: 1, repeats: false)
        )
        
        UNUserNotificationCenter.current().add(request) { error in
            if let error = error {
                print("‚ùå Failed to send return notification: \(error)")
            } else {
                print("üì§ Sent return to app notification")
            }
        }
    }
    
    private func schedulePeriodicNotifications() {
        guard isBlocked else { return }
        
        let content = UNMutableNotificationContent()
        content.title = "‚è∞ Steps Trader"
        content.body = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–¥–µ–ª–∞–π—Ç–µ –±–æ–ª—å—à–µ —à–∞–≥–æ–≤ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏!"
        content.sound = .default
        
        let request = UNNotificationRequest(
            identifier: "periodicReminder-\(UUID().uuidString)",
            content: content,
            trigger: UNTimeIntervalNotificationTrigger(timeInterval: 300, repeats: true) // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        )
        
        UNUserNotificationCenter.current().add(request)
        
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –µ—Å–ª–∏ –≤—Å–µ –µ—â–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
        DispatchQueue.main.asyncAfter(deadline: .now() + 300) { [weak self] in
            self?.schedulePeriodicNotifications()
        }
    }

    func bootstrap() async {
        print("üöÄ Steps Trader: Starting bootstrap...")
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏–∑ shared storage (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ DeviceActivity –æ–±–Ω–æ–≤–∏–ª –µ–≥–æ)
        loadSpentTime()
        
        do {
            print("üìä Requesting HealthKit authorization...")
            try await healthKitService.requestAuthorization()
            print("‚úÖ HealthKit authorization completed")
            
            print("üîê Requesting Family Controls authorization...")
            do {
                try await familyControlsService.requestAuthorization()
                print("‚úÖ Family Controls authorization completed")
            } catch {
                print("‚ö†Ô∏è Family Controls authorization failed: \(error)")
                // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –≤–µ—Å—å bootstrap –∏–∑-–∑–∞ Family Controls
            }
            
            print("üîî Requesting notification permissions...")
            try await notificationService.requestPermission()
            print("‚úÖ Notification permissions completed")
            
            print("üìà Fetching today's steps...")
            do {
                stepsToday = try await healthKitService.fetchTodaySteps()
                print("‚úÖ Today's steps: \(Int(stepsToday))")
        } catch {
                print("‚ö†Ô∏è Could not fetch step data: \(error)")
                // –ù–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ –∏–ª–∏ –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–∑–Ω–∞—á–µ–Ω–∏–µ
                #if targetEnvironment(simulator)
                stepsToday = 2500 // –î–µ–º–æ-–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
                print("üéÆ Using demo steps for Simulator: \(Int(stepsToday))")
                #else
                stepsToday = 0
                print("üì± No step data available on device, using 0")
                #endif
            }
            
            print("üí∞ Calculating budget...")
            budgetEngine.resetIfNeeded()
            let budgetMinutes = budgetEngine.minutes(from: stepsToday)
            budgetEngine.setBudget(minutes: budgetMinutes)
            syncBudgetProperties() // Sync budget properties for UI updates
            
            if stepsToday == 0 {
                print("‚ö†Ô∏è No steps available - budget is 0 minutes")
            } else {
                print("‚úÖ Budget calculated: \(budgetMinutes) minutes from \(Int(stepsToday)) steps")
            }
            
            print("üéâ Bootstrap completed successfully!")
            
            // –£–±—Ä–∞–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π ‚Äî —Ç–æ–ª—å–∫–æ —Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å Quick Status Page
            checkForQuickStatusPage()
            
        } catch {
            print("‚ùå Bootstrap failed: \(error)")
            message = "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: \(error.localizedDescription)"
        }
    }

    func recalc() async throws {
        budgetEngine.resetIfNeeded()
        
        do {
            stepsToday = try await healthKitService.fetchTodaySteps()
        } catch {
            print("‚ö†Ô∏è Could not fetch step data for recalc: \(error)")
            #if targetEnvironment(simulator)
            stepsToday = 2500 // –î–µ–º–æ-–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
            #else
            stepsToday = 0
            #endif
        }
        
        let mins = budgetEngine.minutes(from: stepsToday)
        budgetEngine.setBudget(minutes: mins)
        syncBudgetProperties() // Sync budget properties for UI updates
        message = "‚úÖ –ë—é–¥–∂–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω: \(mins) –º–∏–Ω—É—Ç (\(Int(stepsToday)) —à–∞–≥–æ–≤)"
    }
    
    func recalcSilently() async {
        budgetEngine.resetIfNeeded()
        
        do {
            stepsToday = try await healthKitService.fetchTodaySteps()
        } catch {
            print("‚ö†Ô∏è Could not fetch step data for silent recalc: \(error)")
            #if targetEnvironment(simulator)
            stepsToday = 2500 // –î–µ–º–æ-–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
            #else
            stepsToday = 0
            #endif
        }
        
        let mins = budgetEngine.minutes(from: stepsToday)
        budgetEngine.setBudget(minutes: mins)
        syncBudgetProperties() // Sync budget properties for UI updates
        print("üîÑ Silent budget recalculation: \(mins) minutes from \(Int(stepsToday)) steps")
    }
    
    func toggleRealBlocking() {
        print("üöÄ === –ù–ê–ß–ê–õ–û TOGGLE REAL BLOCKING ===")
        print("üîê Family Controls –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: \(familyControlsService.isAuthorized)")
        print("üì± –í—ã–±—Ä–∞–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: \(appSelection.applicationTokens.count)")
        print("üìÇ –í—ã–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: \(appSelection.categoryTokens.count)")
        print("‚è±Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ: \(isTrackingTime)")
        print("üí∞ –û—Å—Ç–∞–ª–æ—Å—å –º–∏–Ω—É—Ç: \(budgetEngine.remainingMinutes)")
        
        guard familyControlsService.isAuthorized else {
            print("‚ùå Family Controls –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –≤—ã—Ö–æ–¥")
            message = "‚ùå Family Controls –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
            return
        }
        
        guard !appSelection.applicationTokens.isEmpty || !appSelection.categoryTokens.isEmpty else {
            print("‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π - –≤—ã—Ö–æ–¥")
            message = "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"
            return
        }
        
        if isTrackingTime {
            print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")
            stopTracking()
            message = "üîì –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞"
            print("‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        } else {
            print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã UI –Ω–µ –∑–∞–≤–∏—Å–∞–ª
            message = "üõ°Ô∏è –ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è..."
            print("üì± UI —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: '–ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è...'")
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            Task { [weak self] in
                print("üîÑ –°–æ–∑–¥–∞–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
                await MainActor.run {
                    print("üéØ –í—ã–ø–æ–ª–Ω—è–µ–º startTracking –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
                    self?.startTracking()
                    let appCount = self?.appSelection.applicationTokens.count ?? 0
                    let remainingMinutes = self?.budgetEngine.remainingMinutes ?? 0
                    self?.message = "üõ°Ô∏è –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –õ–∏–º–∏—Ç: \(remainingMinutes) –º–∏–Ω—É—Ç"
                    print("‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ: \(appCount) –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, \(remainingMinutes) –º–∏–Ω—É—Ç")
                }
            }
        }
        
        print("üöÄ === –ó–ê–í–ï–†–®–ï–ù–ò–ï TOGGLE REAL BLOCKING ===")
    }
    
    private func startTracking() {
        print("üéØ === –ù–ê–ß–ê–õ–û START TRACKING ===")
        print("üí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—é–¥–∂–µ—Ç: \(budgetEngine.remainingMinutes) –º–∏–Ω—É—Ç")
        
        guard budgetEngine.remainingMinutes > 0 else {
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ - –≤—ã—Ö–æ–¥")
            message = "Steps Trader: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏! –°–¥–µ–ª–∞–π—Ç–µ –±–æ–ª—å—à–µ —à–∞–≥–æ–≤."
            return
        }
        
        print("üì± –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: \(appSelection.applicationTokens.count) apps, \(appSelection.categoryTokens.count) categories")
        guard !appSelection.applicationTokens.isEmpty || !appSelection.categoryTokens.isEmpty else {
            print("‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π - –≤—ã—Ö–æ–¥")
            message = "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"
            return
        }
        
        print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")
        isTrackingTime = true
        startTime = Date()
        currentSessionElapsed = 0
        print("‚è±Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ñ–ª–∞–≥–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: isTrackingTime=true, startTime=\(Date())")
        
        let appCount = appSelection.applicationTokens.count
        print("üöÄ Started tracking for \(appCount) selected applications")
        print("‚è±Ô∏è Available time: \(budgetEngine.remainingMinutes) minutes")
        print("üéØ Using DeviceActivity for real-time usage monitoring")
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º DeviceActivity –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        if let familyService = familyControlsService as? FamilyControlsService {
            print("üîß DEBUG: Starting monitoring with:")
            print("   - Selected apps: \(appSelection.applicationTokens.count)")
            print("   - Selected categories: \(appSelection.categoryTokens.count)")
            print("   - Budget minutes: \(budgetEngine.remainingMinutes)")
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            Task { [weak self] in
                print("üîÑ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º 10 —Å–µ–∫")
                await self?.withTimeout(seconds: 10) {
                    print("‚è∞ –ó–∞–ø—É—Å–∫–∞–µ–º startMonitoring –≤ FamilyControlsService")
                    await MainActor.run {
                        familyService.startMonitoring(budgetMinutes: self?.budgetEngine.remainingMinutes ?? 0)
                    }
                    print("‚úÖ startMonitoring –∑–∞–≤–µ—Ä—à–µ–Ω")
                }
                
                print("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É DeviceActivity")
                // Run diagnostic after starting monitoring
                familyService.checkDeviceActivityStatus()
                print("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            }
        } else {
            print("‚ùå Failed to cast familyControlsService to FamilyControlsService")
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ DeviceActivity
        #if targetEnvironment(simulator)
        // –í —Å–∏–º—É–ª—è—Ç–æ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π–º–µ—Ä –∫–∞–∫ fallback
        print("‚ö†Ô∏è Using timer-based tracking (Simulator - DeviceActivity not available)")
        startTimerFallback()
        #else
        // –ù–∞ —Ä–µ–∞–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DeviceActivity
        if familyControlsService.isAuthorized {
            print("‚úÖ Using DeviceActivity for real background tracking")
            print("‚úÖ –†–µ–∞–ª—å–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ. –í—Ä–µ–º—è —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ.")
        } else {
            print("‚ö†Ô∏è Using timer-based tracking (Family Controls not authorized)")
            startTimerFallback()
        }
        #endif
    }
    
    private func startTimerFallback() {
        // –¢–∞–π–º–µ—Ä –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ —Å–∏–º—É–ª–∏—Ä—É–µ—Ç 1 –º–∏–Ω—É—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (1:1 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ)
        timer = Timer.scheduledTimer(withTimeInterval: 60, repeats: true) { [weak self] _ in
            Task { @MainActor [weak self] in
                self?.simulateAppUsage()
            }
        }
        
        print("‚ö†Ô∏è –î–µ–º–æ-—Ä–µ–∂–∏–º: –≤—Ä–µ–º—è —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—É—é —Ä–µ–∞–ª—å–Ω—É—é –º–∏–Ω—É—Ç—É (—Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)")
    }
    
    func stopTracking() {
        isTrackingTime = false
        isBlocked = false  // –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        timer?.invalidate()
        timer = nil
        startTime = nil
        currentSessionElapsed = nil
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DeviceActivity –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if let familyService = familyControlsService as? FamilyControlsService {
            familyService.stopMonitoring()
        }
        
        print("üõë Tracking stopped - DeviceActivity monitoring disabled")
    }
    
    // Timer-based tracking (fallback without DeviceActivity entitlement)
    
    private func simulateAppUsage() {
        guard isTrackingTime else { return }
        print("‚è±Ô∏è DEMO: Simulating 1 minute of app usage")
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ 1 –º–∏–Ω—É—Ç—É
        updateSpentTime(minutes: spentMinutes + 1)
        
        // –°–ø–∏—Å—ã–≤–∞–µ–º –∏–∑ –±—é–¥–∂–µ—Ç–∞
        consumeMinutes(1)
        
        print("‚è±Ô∏è Spent: \(spentMinutes) min, Remaining: \(remainingMinutes) min")
        
        if remainingMinutes <= 0 {
            stopTracking()
            isBlocked = true
            message = "‚è∞ –î–ï–ú–û: –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!"
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ ManagedSettings
            if let familyService = familyControlsService as? FamilyControlsService {
                familyService.enableShield()
                print("üõ°Ô∏è Applied real app blocking via ManagedSettings")
            }
            
            notificationService.sendTimeExpiredNotification()
            sendReturnToAppNotification()
            AudioServicesPlaySystemSound(1005)
        }
    }
    
    func checkForQuickStatusPage() {
        let userDefaults = UserDefaults.stepsTrader()
        let shouldShow = userDefaults.bool(forKey: "shouldShowQuickStatusPage")
        let shouldShowFocusGate = userDefaults.bool(forKey: "shouldShowFocusGate")
        let shouldAutoSelectApps = userDefaults.bool(forKey: "shouldAutoSelectApps")
        
        print("üîç Checking flags - Quick Status: \(shouldShow), Auto Select: \(shouldAutoSelectApps)")
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω (—Ç–æ–ª—å–∫–æ —Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä)
        
        if shouldShow {
            print("üéØ Setting showQuickStatusPage = true")
            showQuickStatusPage = true
            // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥
            userDefaults.removeObject(forKey: "shouldShowQuickStatusPage")
            print("üéØ Opening Quick Status Page from Intent")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ —à–æ—Ä—Ç–∫–∞—Ç–∞
            checkShortcutAppMatching(userDefaults: userDefaults)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
            let shouldAutoClose = userDefaults.bool(forKey: "shouldAutoCloseQuickStatus")
            if shouldAutoClose {
                let targetApp = userDefaults.string(forKey: "targetAppForReturn") ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
                print("üîÑ Auto-close scheduled in 1 second, target app: \(targetApp)")
                userDefaults.removeObject(forKey: "shouldAutoCloseQuickStatus")
                userDefaults.removeObject(forKey: "targetAppForReturn")
                
                DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                    print("üîÑ Auto-closing QuickStatusView and opening \(targetApp)")
                    self.showQuickStatusPage = false
                    
                    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É Intent'–∞
                    userDefaults.set(Date(), forKey: "returnModeActivatedTime")
                    
                    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                    self.openTargetApp(targetApp)
                }
            }
        } else {
            print("üîç No Quick Status flag found")
        }

        if shouldShowFocusGate {
            focusGateTargetBundleId = userDefaults.string(forKey: "focusGateTargetBundleId")
            showFocusGate = focusGateTargetBundleId != nil
            userDefaults.removeObject(forKey: "shouldShowFocusGate")
            print("üéØ FocusGate (from UserDefaults): show=\(showFocusGate), target=\(focusGateTargetBundleId ?? "nil")")
        }
    }

    // MARK: - Public helpers for views
    func reloadBudgetFromStorage() {
        if let engine = budgetEngine as? BudgetEngine {
            engine.reloadFromStorage()
            syncBudgetProperties() // Sync budget properties for UI updates
        }
    }
    
    private func openTargetApp(_ appName: String) {
        print("üöÄ Attempting to open target app: \(appName)")
        
        let urlScheme: String
        switch appName.lowercased() {
        case "instagram":
            urlScheme = "instagram://"
        case "tiktok":
            urlScheme = "tiktok://"
        case "youtube":
            urlScheme = "youtube://"
        default:
            print("‚ùå Unknown app: \(appName)")
            return
        }
        
        guard let url = URL(string: urlScheme) else {
            print("‚ùå Invalid URL scheme: \(urlScheme)")
            return
        }
        
        DispatchQueue.main.async {
            UIApplication.shared.open(url) { success in
                if success {
                    print("‚úÖ Successfully opened \(appName)")
                } else {
                    print("‚ùå Failed to open \(appName) - app might not be installed")
                }
            }
        }
    }
    
    private func checkShortcutAppMatching(userDefaults: UserDefaults?) {
        guard let userDefaults = userDefaults,
              let bundleId = userDefaults.string(forKey: "shortcutTargetBundleId") else {
            return
        }
        
        print("üîó Checking shortcut app matching for bundle: \(bundleId)")
        
        if appSelection.applicationTokens.isEmpty {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ —à–æ—Ä—Ç–∫–∞—Ç–∞
            print("üîó No apps selected, auto-setting target from shortcut: \(bundleId)")
            autoSetTargetApp(bundleId: bundleId)
            
            DispatchQueue.main.async {
                self.message = "üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–æ \(self.getBundleIdDisplayName(bundleId)) –∏–∑ —à–æ—Ä—Ç–∫–∞—Ç–∞!"
            }
        } else {
            print("üîó Apps already selected, using existing selection")
        }
        
        // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        userDefaults.removeObject(forKey: "shortcutTargetBundleId")
    }
    
    private func getBundleIdDisplayName(_ bundleId: String) -> String {
        switch bundleId {
        case "com.burbn.instagram": return "Instagram"
        case "com.zhiliaoapp.musically": return "TikTok"
        case "com.google.ios.youtube": return "YouTube"
        default: return bundleId
        }
    }
    
    // MARK: - App Selection Methods
    
    func toggleInstagramSelection(_ enabled: Bool) {
        isInstagramSelected = enabled
    }
    
    private func setInstagramAsTarget() {
        // –ù–µ –º–µ–Ω—è–µ–º appSelection –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ ‚Äî –≤—ã–±–æ—Ä –¥–µ–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ FamilyActivityPicker
        print("üéØ Instagram: user-driven selection via FamilyActivityPicker (no-op)")
        isUpdatingInstagramSelection = true
        defer { isUpdatingInstagramSelection = false }
        isInstagramSelected = true
    }
    
    private func clearAppSelection() {
        print("üßπ === –ù–ê–ß–ê–õ–û –û–ß–ò–°–¢–ö–ò –í–´–ë–û–†–ê ===")
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–µ–∫—É—Ä—Å–∏–∏
        isUpdatingInstagramSelection = true
        defer { isUpdatingInstagramSelection = false }
        
        appSelection = FamilyActivitySelection()
        print("üì± App selection cleared")
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ Instagram –±–µ–∑ –≤—ã–∑–æ–≤–∞ didSet (–∏–∑–±–µ–≥–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–∏)
        isInstagramSelected = false
        print("‚úÖ isInstagramSelected = false (–±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏)")
        
        print("üßπ === –ó–ê–í–ï–†–®–ï–ù–ò–ï –û–ß–ò–°–¢–ö–ò –í–´–ë–û–†–ê ===")
    }
    
    // MARK: - Smart App Selection
    
    /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ bundle ID
    private func autoSetTargetApp(bundleId: String) {
        print("üéØ Auto-setting target app: \(bundleId)")
        
        switch bundleId {
        case "com.burbn.instagram":
            setInstagramAsTarget()
        case "com.zhiliaoapp.musically", "com.google.ios.youtube":
            // –î–ª—è TikTok –∏ YouTube –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (—Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä)
            break
        default:
            // –ë–µ–∑ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî —Ç–æ–ª—å–∫–æ —Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä –≤ FamilyActivityPicker
            break
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –≤—ã–±–æ—Ä –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º
        let userDefaults = UserDefaults.stepsTrader()
        userDefaults.set(bundleId, forKey: "autoSelectedAppBundleId")
        userDefaults.set(Date(), forKey: "autoSelectionDate")
        
        print("‚úÖ Auto-selected app: \(getBundleIdDisplayName(bundleId))")
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —É–¥–∞–ª–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É–º–Ω—ã–π –≤—ã–±–æ—Ä —É–¥–∞–ª–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä
    
    private func setEntertainmentAsTarget() {
        let newSelection = FamilyActivitySelection()
        // –û—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –≤—ã–±–æ—Ä - DeviceActivityMonitor –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        appSelection = newSelection
        print("üì± Entertainment apps selected for tracking")
    }
    
    // setSocialMediaAsTarget —É–¥–∞–ª–µ–Ω ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä –≤ FamilyActivityPicker
    
    // MARK: - Utility Functions
    
    private func withTimeout<T>(seconds: TimeInterval, operation: @Sendable @escaping () async -> T) async -> T? {
        await withTaskGroup(of: T?.self) { group in
            group.addTask { await operation() }
            group.addTask {
                try? await Task.sleep(nanoseconds: UInt64(seconds * 1_000_000_000))
                return nil
            }
            var result: T? = nil
            while let value = await group.next() {
                if let unwrapped = value {
                    result = unwrapped
                    group.cancelAll()
                    break
                }
            }
            return result
        }
    }

    deinit {
        // –£–¥–∞–ª—è–µ–º observer —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å dangling callback –∏ EXC_BAD_ACCESS
        CFNotificationCenterRemoveObserver(
            CFNotificationCenterGetDarwinNotifyCenter(),
            Unmanaged.passUnretained(self).toOpaque(),
            nil,
            nil
        )
    }
}

@MainActor
private func requestFamilyControlsIfNeeded() async {
    let center = AuthorizationCenter.shared
    switch center.authorizationStatus {
    case .notDetermined:
        do { try await center.requestAuthorization(for: .individual) }
        catch { print("‚ùå FamilyControls auth failed: \(error)") }
    default: break
    }
}

@MainActor
private func requestNotificationPermissionIfNeeded() async {
    do { try await DIContainer.shared.makeNotificationService().requestPermission() }
    catch { print("‚ùå Notification permission failed: \(error)") }
}
