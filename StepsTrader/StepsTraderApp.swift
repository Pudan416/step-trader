import SwiftUI
import HealthKit
import Combine
import FamilyControls
import UserNotifications
import AVFoundation
import DeviceActivity
import ManagedSettings
import Foundation


// MARK: - Notification Manager
final class NotificationManager: NotificationServiceProtocol {
    static let shared = NotificationManager()
    
    private init() {}
    
    func requestPermission() async throws {
        let center = UNUserNotificationCenter.current()
        let granted = try await center.requestAuthorization(options: [.alert, .sound, .badge])
        
        if granted {
            print("‚úÖ Notification permission granted")
        } else {
            print("‚ùå Notification permission denied")
            throw NotificationError.permissionDenied
        }
    }
    
    func sendTimeExpiredNotification() {
        let content = UNMutableNotificationContent()
        content.title = "‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!"
        content.body = "–î–æ—Å—Ç—É–ø –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –°–¥–µ–ª–∞–π—Ç–µ –±–æ–ª—å—à–µ —à–∞–≥–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏."
        content.sound = .default
        content.badge = 1
        
        let request = UNNotificationRequest(
            identifier: "timeExpired",
            content: content,
            trigger: nil // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        )
        
        UNUserNotificationCenter.current().add(request)
    }
    
    func sendTestNotification() {
        let content = UNMutableNotificationContent()
        content.title = "üîî –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        content.body = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç Steps Trader"
        content.sound = .default
        
        let request = UNNotificationRequest(
            identifier: "testNotification",
            content: content,
            trigger: nil
        )
        
        UNUserNotificationCenter.current().add(request)
    }
}

// MARK: - Notification Errors
enum NotificationError: Error, LocalizedError {
    case permissionDenied
    
    var errorDescription: String? {
        switch self {
        case .permissionDenied:
            return "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        }
    }
}

// MARK: - Dependency Injection Container
final class DIContainer {
    static let shared = DIContainer()
    
    private init() {}
    
    // MARK: - Service Factories
    func makeHealthKitService() -> any HealthKitServiceProtocol {
        HealthKitService()
    }
    
    @MainActor
    func makeFamilyControlsService() -> any FamilyControlsServiceProtocol {
        FamilyControlsService()
    }
    
    func makeNotificationService() -> any NotificationServiceProtocol {
        NotificationManager.shared
    }
    
    func makeBudgetEngine() -> any BudgetEngineProtocol {
        BudgetEngine()
    }
    
    // MARK: - App Model Factory
    @MainActor
    func makeAppModel() -> AppModel {
        AppModel(
            healthKitService: makeHealthKitService(),
            familyControlsService: makeFamilyControlsService(),
            notificationService: makeNotificationService(),
            budgetEngine: makeBudgetEngine()
        )
    }
}

// MARK: - AppModel
@MainActor
final class AppModel: ObservableObject {
    // Dependencies
    private let healthKitService: any HealthKitServiceProtocol
    let familyControlsService: any FamilyControlsServiceProtocol
    private let notificationService: any NotificationServiceProtocol
    private let budgetEngine: any BudgetEngineProtocol
    
    // Published properties
    @Published var stepsToday: Double = 0
    @Published var spentSteps: Int = 0
    @Published var spentMinutes: Int = 0  // –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    @Published var isTrackingTime = false
    @Published var isBlocked = false  // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —ç–∫—Ä–∞–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    @Published var message: String?
    @Published var currentSessionElapsed: Int?
    @Published var appSelection = FamilyActivitySelection() {
        didSet {
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å FamilyControlsService —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if appSelection.applicationTokens != oldValue.applicationTokens || 
               appSelection.categoryTokens != oldValue.categoryTokens {
                syncAppSelectionToService()
                saveAppSelection() // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            }
        }
    }
    
    private var startTime: Date?
    private var timer: Timer?

    init(
        healthKitService: any HealthKitServiceProtocol,
        familyControlsService: any FamilyControlsServiceProtocol,
        notificationService: any NotificationServiceProtocol,
        budgetEngine: any BudgetEngineProtocol
    ) {
        self.healthKitService = healthKitService
        self.familyControlsService = familyControlsService
        self.notificationService = notificationService
        self.budgetEngine = budgetEngine
        
        print("üéØ AppModel initialized with dependencies")
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ –≤—ã–∑–æ–≤–∞ didSet
        DispatchQueue.main.async { [weak self] in
            guard let self = self else { return }
            
            // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
            self.loadAppSelection()
            
            // –ó–∞—Ç–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å FamilyControlsService
            if self.appSelection.applicationTokens.isEmpty && self.appSelection.categoryTokens.isEmpty {
                self.appSelection = self.familyControlsService.selection
            }
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self.loadSpentTime()
            print("üîÑ Initial sync: \(self.appSelection.applicationTokens.count) apps")
        }
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º —Ü–∏–∫–ª–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        setupAppLifecycleObservers()
    }
    
    private func setupAppLifecycleObservers() {
        // –ö–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Ö–æ–¥–∏—Ç –≤ —Ñ–æ–Ω
        NotificationCenter.default.addObserver(
            forName: UIApplication.didEnterBackgroundNotification,
            object: nil,
            queue: .main
        ) { [weak self] _ in
            self?.handleAppDidEnterBackground()
        }
        
        // –ö–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω
        NotificationCenter.default.addObserver(
            forName: UIApplication.willEnterForegroundNotification,
            object: nil,
            queue: .main
        ) { [weak self] _ in
            self?.handleAppWillEnterForeground()
        }
    }
    
    private func handleAppDidEnterBackground() {
        print("üì± App entered background - timer will be suspended")
        if isTrackingTime {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —É—Ö–æ–¥–∞ –≤ —Ñ–æ–Ω
            UserDefaults.standard.set(Date(), forKey: "backgroundTime")
            print("üíæ Saved background time for tracking calculation")
        }
    }
    
    private func handleAppWillEnterForeground() {
        print("üì± App entering foreground - checking elapsed time")
        
        guard isTrackingTime else { return }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ –≤ —Ñ–æ–Ω–µ
        if let backgroundTime = UserDefaults.standard.object(forKey: "backgroundTime") as? Date {
            let elapsedSeconds = Date().timeIntervalSince(backgroundTime)
            let elapsedMinutes = Int(elapsedSeconds / 60)
            
            if elapsedMinutes > 0 {
                print("‚è∞ App was in background for \(elapsedMinutes) minutes")
                
                // –°–∏–º—É–ª–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞ –≤—Ä–µ–º—è –≤ —Ñ–æ–Ω–µ
                for _ in 0..<elapsedMinutes {
                    guard budgetEngine.remainingMinutes > 0 else {
                        // –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ –ø–æ–∫–∞ –±—ã–ª–∏ –≤ —Ñ–æ–Ω–µ
                        stopTracking()
                        isBlocked = true
                        message = "‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ –ø–æ–∫–∞ –≤—ã –±—ã–ª–∏ –≤–Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!"
                        
                        if let familyService = familyControlsService as? FamilyControlsService {
                            familyService.enableShield()
                        }
                        
                        notificationService.sendTimeExpiredNotification()
                        sendReturnToAppNotification()
                        AudioServicesPlaySystemSound(1005)
                        break
                    }
                    
                    updateSpentTime(minutes: spentMinutes + 1)
                    budgetEngine.consume(mins: 1)
                }
                
                print("‚è±Ô∏è Updated: spent \(spentMinutes) min, remaining \(budgetEngine.remainingMinutes) min")
            }
            
            UserDefaults.standard.removeObject(forKey: "backgroundTime")
        }
    }
    
    // Convenience computed properties for backward compatibility
    var budget: any BudgetEngineProtocol { budgetEngine }
    var family: any FamilyControlsServiceProtocol { familyControlsService }
    
    private func syncAppSelectionToService() {
        print("üîÑ Syncing app selection to service: \(appSelection.applicationTokens.count) apps, \(appSelection.categoryTokens.count) categories")
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        var finalSelection = appSelection
        
        if appSelection.applicationTokens.count > 1 {
            finalSelection = FamilyActivitySelection()
            if let firstApp = appSelection.applicationTokens.first {
                finalSelection.applicationTokens.insert(firstApp)
            }
            print("üîÑ Limited to first app")
        } else if appSelection.categoryTokens.count > 1 {
            finalSelection = FamilyActivitySelection()
            if let firstCategory = appSelection.categoryTokens.first {
                finalSelection.categoryTokens.insert(firstCategory)
            }
            print("üîÑ Limited to first category")
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –≤—ã–∑–æ–≤–∞ updateSelection (–∏–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–æ–≤)
        DispatchQueue.main.async { [weak self] in
            guard let self = self else { return }
            (self.familyControlsService as? FamilyControlsService)?.selection = finalSelection
            print("‚úÖ Service updated with \(finalSelection.applicationTokens.count) apps")
        }
    }

    private func loadSpentTime() {
        let userDefaults = UserDefaults(suiteName: "group.personal-project.StepsTrader")
        let savedSpentMinutes = userDefaults?.integer(forKey: "spentMinutes") ?? 0
        let savedDate = userDefaults?.object(forKey: "spentTimeDate") as? Date ?? Date()
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –µ—Å–ª–∏ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å
        if !Calendar.current.isDate(savedDate, inSameDayAs: Date()) {
            spentMinutes = 0
            spentSteps = 0
            saveSpentTime()
            print("üîÑ Reset spent time for new day")
                } else {
            spentMinutes = savedSpentMinutes
            spentSteps = spentMinutes * Int(budgetEngine.stepsPerMinute)
            print("üìä Loaded spent time: \(spentMinutes) minutes, \(spentSteps) steps")
        }
    }
    
    private func saveSpentTime() {
        let userDefaults = UserDefaults(suiteName: "group.personal-project.StepsTrader")
        userDefaults?.set(spentMinutes, forKey: "spentMinutes")
        userDefaults?.set(Date(), forKey: "spentTimeDate")
        print("üíæ Saved spent time: \(spentMinutes) minutes")
    }
    
    func updateSpentTime(minutes: Int) {
        spentMinutes = minutes
        spentSteps = spentMinutes * Int(budgetEngine.stepsPerMinute)
        saveSpentTime()
        print("üïê Updated spent time: \(spentMinutes) minutes (\(spentSteps) steps)")
    }
    
    // MARK: - App Selection Persistence
    
    private func saveAppSelection() {
        let userDefaults = UserDefaults(suiteName: "group.personal-project.StepsTrader")
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ApplicationTokens
        if !appSelection.applicationTokens.isEmpty {
            do {
                let tokensData = try NSKeyedArchiver.archivedData(withRootObject: appSelection.applicationTokens, requiringSecureCoding: true)
                userDefaults?.set(tokensData, forKey: "persistentApplicationTokens")
                print("üíæ Saved app selection: \(appSelection.applicationTokens.count) apps")
            } catch {
                print("‚ùå Failed to save app selection: \(error)")
            }
                } else {
            userDefaults?.removeObject(forKey: "persistentApplicationTokens")
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º CategoryTokens
        if !appSelection.categoryTokens.isEmpty {
            do {
                let categoriesData = try NSKeyedArchiver.archivedData(withRootObject: appSelection.categoryTokens, requiringSecureCoding: true)
                userDefaults?.set(categoriesData, forKey: "persistentCategoryTokens")
                print("üíæ Saved category selection: \(appSelection.categoryTokens.count) categories")
            } catch {
                print("‚ùå Failed to save category selection: \(error)")
            }
                                } else {
            userDefaults?.removeObject(forKey: "persistentCategoryTokens")
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        userDefaults?.set(Date(), forKey: "appSelectionSavedDate")
    }
    
    private func loadAppSelection() {
        let userDefaults = UserDefaults(suiteName: "group.personal-project.StepsTrader")
        var hasSelection = false
        var newSelection = FamilyActivitySelection()
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ApplicationTokens
        if let tokensData = userDefaults?.data(forKey: "persistentApplicationTokens") {
            do {
                if let applicationTokens = try NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(tokensData) as? Set<ApplicationToken> {
                    newSelection.applicationTokens = applicationTokens
                    hasSelection = true
                    print("üì± Restored app selection: \(applicationTokens.count) apps")
                }
            } catch {
                print("‚ùå Failed to restore app selection: \(error)")
            }
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CategoryTokens
        if let categoriesData = userDefaults?.data(forKey: "persistentCategoryTokens") {
            do {
                if let categoryTokens = try NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(categoriesData) as? Set<ActivityCategoryToken> {
                    newSelection.categoryTokens = categoryTokens
                    hasSelection = true
                    print("üì± Restored category selection: \(categoryTokens.count) categories")
                }
            } catch {
                print("‚ùå Failed to restore category selection: \(error)")
            }
        }
        
        if hasSelection {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±–æ—Ä –±–µ–∑ –≤—ã–∑–æ–≤–∞ didSet (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
            self.appSelection = newSelection
            print("‚úÖ App selection restored successfully")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            if let savedDate = userDefaults?.object(forKey: "appSelectionSavedDate") as? Date {
                let formatter = DateFormatter()
                formatter.dateStyle = .medium
                formatter.timeStyle = .short
                print("üìÖ App selection was saved on: \(formatter.string(from: savedDate))")
            }
        } else {
            print("üì± No saved app selection found")
        }
    }
    
    func runDiagnostics() {
        print("üîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê FAMILY CONTROLS ===")
        
        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if let familyService = familyControlsService as? FamilyControlsService {
            familyService.checkAuthorizationStatus()
        }
        
        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        print("üì± –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
        print("   - ApplicationTokens: \(appSelection.applicationTokens.count)")
        print("   - CategoryTokens: \(appSelection.categoryTokens.count)")
        
        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—é–¥–∂–µ—Ç–∞
        print("üí∞ –ë—é–¥–∂–µ—Ç:")
        print("   - –í—Å–µ–≥–æ –º–∏–Ω—É—Ç: \(budgetEngine.dailyBudgetMinutes)")
        print("   - –û—Å—Ç–∞–ª–æ—Å—å –º–∏–Ω—É—Ç: \(budgetEngine.remainingMinutes)")
        print("   - –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –º–∏–Ω—É—Ç: \(spentMinutes)")
        
        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        print("‚è±Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:")
        print("   - –ê–∫—Ç–∏–≤–Ω–æ: \(isTrackingTime)")
        print("   - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: \(isBlocked)")
        
        // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ UserDefaults
        let userDefaults = UserDefaults(suiteName: "group.personal-project.StepsTrader")
        print("üíæ Shared UserDefaults:")
        print("   - Budget minutes: \(userDefaults?.object(forKey: "budgetMinutes") ?? "nil")")
        print("   - Spent minutes: \(userDefaults?.object(forKey: "spentMinutes") ?? "nil")")
        print("   - Monitoring start: \(userDefaults?.object(forKey: "monitoringStartTime") ?? "nil")")
        
        // 6. DeviceActivity –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        if let familyService = familyControlsService as? FamilyControlsService {
            familyService.checkDeviceActivityStatus()
        }
        
        message = "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å Xcode –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
    }
    
    func resetStatistics() {
        print("üîÑ === –°–ë–†–û–° –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===")
        
        // 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ
        if isTrackingTime {
            stopTracking()
        }
        
        // 2. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        spentMinutes = 0
        spentSteps = 0
        isBlocked = false
        currentSessionElapsed = nil
        
        // 3. –û—á–∏—â–∞–µ–º UserDefaults (App Group)
        let userDefaults = UserDefaults(suiteName: "group.personal-project.StepsTrader")
        userDefaults?.removeObject(forKey: "spentMinutes")
        userDefaults?.removeObject(forKey: "spentTimeDate")
        userDefaults?.removeObject(forKey: "budgetMinutes")
        userDefaults?.removeObject(forKey: "monitoringStartTime")
        userDefaults?.removeObject(forKey: "selectedAppsCount")
        userDefaults?.removeObject(forKey: "selectedCategoriesCount")
        userDefaults?.removeObject(forKey: "selectedApplicationTokens")
        userDefaults?.removeObject(forKey: "persistentApplicationTokens")
        userDefaults?.removeObject(forKey: "persistentCategoryTokens")
        userDefaults?.removeObject(forKey: "appSelectionSavedDate")
        print("üíæ –û—á–∏—â–µ–Ω—ã App Group UserDefaults")
        
        // 4. –û—á–∏—â–∞–µ–º –æ–±—ã—á–Ω—ã–µ UserDefaults
        UserDefaults.standard.removeObject(forKey: "dailyBudgetMinutes")
        UserDefaults.standard.removeObject(forKey: "remainingMinutes")
        UserDefaults.standard.removeObject(forKey: "todayAnchor")
        print("üíæ –û—á–∏—â–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ UserDefaults")
        
        // 5. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±—é–¥–∂–µ—Ç –≤—Ä—É—á–Ω—É—é (—Ç–∞–∫ –∫–∞–∫ resetForToday –ø—Ä–∏–≤–∞—Ç–Ω—ã–π)
        let todayStart = Calendar.current.startOfDay(for: Date())
        UserDefaults.standard.set(todayStart, forKey: "todayAnchor")
        UserDefaults.standard.set(0, forKey: "dailyBudgetMinutes")
        UserDefaults.standard.set(0, forKey: "remainingMinutes")
        print("üí∞ –°–±—Ä–æ—à–µ–Ω –±—é–¥–∂–µ—Ç")
        
        // 6. –°–Ω–∏–º–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if let familyService = familyControlsService as? FamilyControlsService {
            familyService.stopMonitoring()
            familyService.disableShield()
            print("üõ°Ô∏è –û—Ç–∫–ª—é—á–µ–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
        }
        
        // 7. –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (–∫–∞–∫ –≤—ã–±–æ—Ä, —Ç–∞–∫ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        appSelection = FamilyActivitySelection()
        print("üì± –û—á–∏—â–µ–Ω –≤—ã–±–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        // 8. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±—é–¥–∂–µ—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ —à–∞–≥–∞–º–∏
        Task {
            do {
                stepsToday = try await healthKitService.fetchTodaySteps()
                let mins = budgetEngine.minutes(from: stepsToday)
                budgetEngine.setBudget(minutes: mins)
                message = "üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞! –ù–æ–≤—ã–π –±—é–¥–∂–µ—Ç: \(mins) –º–∏–Ω—É—Ç –∏–∑ \(Int(stepsToday)) —à–∞–≥–æ–≤"
                print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –ù–æ–≤—ã–π –±—é–¥–∂–µ—Ç: \(mins) –º–∏–Ω—É—Ç")
        } catch {
                message = "üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞, –Ω–æ –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–≥–æ–≤: \(error.localizedDescription)"
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —à–∞–≥–æ–≤: \(error)")
            }
        }
        
        print("‚úÖ === –°–ë–†–û–° –ó–ê–í–ï–†–®–ï–ù ===")
    }
    
    private func sendReturnToAppNotification() {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        DispatchQueue.main.asyncAfter(deadline: .now() + 30) { [weak self] in
            self?.scheduleReturnNotification()
        }
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        DispatchQueue.main.asyncAfter(deadline: .now() + 300) { [weak self] in
            self?.schedulePeriodicNotifications()
        }
    }
    
    private func scheduleReturnNotification() {
        let content = UNMutableNotificationContent()
        content.title = "üö∂‚Äç‚ôÇÔ∏è Steps Trader"
        content.body = "–°–¥–µ–ª–∞–π—Ç–µ –±–æ–ª—å—à–µ —à–∞–≥–æ–≤, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π!"
        content.sound = .default
        content.badge = 1
        
        // –î–æ–±–∞–≤–ª—è–µ–º action –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        let returnAction = UNNotificationAction(
            identifier: "RETURN_TO_APP",
            title: "–û—Ç–∫—Ä—ã—Ç—å Steps Trader",
            options: [.foreground]
        )
        
        let category = UNNotificationCategory(
            identifier: "STEPS_REMINDER",
            actions: [returnAction],
            intentIdentifiers: [],
            options: []
        )
        
        UNUserNotificationCenter.current().setNotificationCategories([category])
        content.categoryIdentifier = "STEPS_REMINDER"
        
        let request = UNNotificationRequest(
            identifier: "stepsReminder-\(UUID().uuidString)",
            content: content,
            trigger: UNTimeIntervalNotificationTrigger(timeInterval: 1, repeats: false)
        )
        
        UNUserNotificationCenter.current().add(request) { error in
            if let error = error {
                print("‚ùå Failed to send return notification: \(error)")
            } else {
                print("üì§ Sent return to app notification")
            }
        }
    }
    
    private func schedulePeriodicNotifications() {
        guard isBlocked else { return }
        
        let content = UNMutableNotificationContent()
        content.title = "‚è∞ Steps Trader"
        content.body = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–¥–µ–ª–∞–π—Ç–µ –±–æ–ª—å—à–µ —à–∞–≥–æ–≤ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏!"
        content.sound = .default
        
        let request = UNNotificationRequest(
            identifier: "periodicReminder-\(UUID().uuidString)",
            content: content,
            trigger: UNTimeIntervalNotificationTrigger(timeInterval: 300, repeats: true) // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        )
        
        UNUserNotificationCenter.current().add(request)
        
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –µ—Å–ª–∏ –≤—Å–µ –µ—â–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
        DispatchQueue.main.asyncAfter(deadline: .now() + 300) { [weak self] in
            self?.schedulePeriodicNotifications()
        }
    }

    func bootstrap() async {
        print("üöÄ Steps Trader: Starting bootstrap...")
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏–∑ shared storage (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ DeviceActivity –æ–±–Ω–æ–≤–∏–ª –µ–≥–æ)
        loadSpentTime()
        
        do {
            print("üìä Requesting HealthKit authorization...")
            try await healthKitService.requestAuthorization()
            print("‚úÖ HealthKit authorization completed")
            
            print("üîê Requesting Family Controls authorization...")
            do {
                try await familyControlsService.requestAuthorization()
                print("‚úÖ Family Controls authorization completed")
            } catch {
                print("‚ö†Ô∏è Family Controls authorization failed: \(error)")
                // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –≤–µ—Å—å bootstrap –∏–∑-–∑–∞ Family Controls
            }
            
            print("üîî Requesting notification permissions...")
            try await notificationService.requestPermission()
            print("‚úÖ Notification permissions completed")
            
            print("üìà Fetching today's steps...")
            do {
                stepsToday = try await healthKitService.fetchTodaySteps()
                print("‚úÖ Today's steps: \(Int(stepsToday))")
        } catch {
                print("‚ö†Ô∏è Could not fetch step data: \(error)")
                // –ù–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ –∏–ª–∏ –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–∑–Ω–∞—á–µ–Ω–∏–µ
                #if targetEnvironment(simulator)
                stepsToday = 2500 // –î–µ–º–æ-–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
                print("üéÆ Using demo steps for Simulator: \(Int(stepsToday))")
                #else
                stepsToday = 0
                print("üì± No step data available on device, using 0")
                #endif
            }
            
            print("üí∞ Calculating budget...")
            budgetEngine.resetIfNeeded()
            let budgetMinutes = budgetEngine.minutes(from: stepsToday)
            budgetEngine.setBudget(minutes: budgetMinutes)
            
            if stepsToday == 0 {
                print("‚ö†Ô∏è No steps available - budget is 0 minutes")
                #if targetEnvironment(simulator)
                message = "üéÆ –î–µ–º–æ-—Ä–µ–∂–∏–º: \(Int(stepsToday)) —à–∞–≥–æ–≤ = \(budgetMinutes) –º–∏–Ω"
                #else
                message = "üì± –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —à–∞–≥–∞—Ö. –ü—Ä–æ–π–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –∏ –æ–±–Ω–æ–≤–∏—Ç–µ."
                #endif
            } else {
                print("‚úÖ Budget calculated: \(budgetMinutes) minutes from \(Int(stepsToday)) steps")
                message = "‚úÖ –ë—é–¥–∂–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω: \(budgetMinutes) –º–∏–Ω"
            }
            
            print("üéâ Bootstrap completed successfully!")
            
        } catch {
            print("‚ùå Bootstrap failed: \(error)")
            message = "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: \(error.localizedDescription)"
        }
    }

    func recalc() async throws {
        budgetEngine.resetIfNeeded()
        
        do {
            stepsToday = try await healthKitService.fetchTodaySteps()
        } catch {
            print("‚ö†Ô∏è Could not fetch step data for recalc: \(error)")
            #if targetEnvironment(simulator)
            stepsToday = 2500 // –î–µ–º–æ-–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
            #else
            stepsToday = 0
            #endif
        }
        
        let mins = budgetEngine.minutes(from: stepsToday)
        budgetEngine.setBudget(minutes: mins)
        message = "‚úÖ –ë—é–¥–∂–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω: \(mins) –º–∏–Ω—É—Ç (\(Int(stepsToday)) —à–∞–≥–æ–≤)"
    }
    
    func recalcSilently() async {
        do {
            budgetEngine.resetIfNeeded()
            
            do {
                stepsToday = try await healthKitService.fetchTodaySteps()
            } catch {
                print("‚ö†Ô∏è Could not fetch step data for silent recalc: \(error)")
                #if targetEnvironment(simulator)
                stepsToday = 2500 // –î–µ–º–æ-–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
                #else
                stepsToday = 0
                #endif
            }
            
            let mins = budgetEngine.minutes(from: stepsToday)
            budgetEngine.setBudget(minutes: mins)
            print("üîÑ Silent budget recalculation: \(mins) minutes from \(Int(stepsToday)) steps")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—á–µ—Ç–µ: \(error)")
        }
    }
    
    func toggleRealBlocking() {
        guard familyControlsService.isAuthorized else {
            message = "‚ùå Family Controls –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
            return
        }
        
        guard !appSelection.applicationTokens.isEmpty || !appSelection.categoryTokens.isEmpty else {
            message = "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"
            return
        }
        
        if isTrackingTime {
            stopTracking()
            message = "üîì –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞"
        } else {
            startTracking()
            let appCount = appSelection.applicationTokens.count
            message = "üõ°Ô∏è –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –õ–∏–º–∏—Ç: \(budgetEngine.remainingMinutes) –º–∏–Ω—É—Ç"
        }
    }
    
    private func startTracking() {
        guard budgetEngine.remainingMinutes > 0 else {
            message = "Steps Trader: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏! –°–¥–µ–ª–∞–π—Ç–µ –±–æ–ª—å—à–µ —à–∞–≥–æ–≤."
            return
        }
        
        guard !appSelection.applicationTokens.isEmpty || !appSelection.categoryTokens.isEmpty else {
            message = "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"
            return
        }
        
        isTrackingTime = true
        startTime = Date()
        currentSessionElapsed = 0
        
        let appCount = appSelection.applicationTokens.count
        print("üöÄ Started tracking for \(appCount) selected applications")
        print("‚è±Ô∏è Available time: \(budgetEngine.remainingMinutes) minutes")
        print("üéØ Using DeviceActivity for real-time usage monitoring")
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º DeviceActivity –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        if let familyService = familyControlsService as? FamilyControlsService {
            print("üîß DEBUG: Starting monitoring with:")
            print("   - Selected apps: \(appSelection.applicationTokens.count)")
            print("   - Selected categories: \(appSelection.categoryTokens.count)")
            print("   - Budget minutes: \(budgetEngine.remainingMinutes)")
            
            familyService.startMonitoring(budgetMinutes: budgetEngine.remainingMinutes)
            
            // Run diagnostic after starting monitoring
            familyService.checkDeviceActivityStatus()
        } else {
            print("‚ùå Failed to cast familyControlsService to FamilyControlsService")
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ DeviceActivity
        #if targetEnvironment(simulator)
        // –í —Å–∏–º—É–ª—è—Ç–æ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π–º–µ—Ä –∫–∞–∫ fallback
        print("‚ö†Ô∏è Using timer-based tracking (Simulator - DeviceActivity not available)")
        startTimerFallback()
        #else
        // –ù–∞ —Ä–µ–∞–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DeviceActivity
        if familyControlsService.isAuthorized {
            print("‚úÖ Using DeviceActivity for real background tracking")
            message = "‚úÖ –†–µ–∞–ª—å–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ. –í—Ä–µ–º—è —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ."
        } else {
            print("‚ö†Ô∏è Using timer-based tracking (Family Controls not authorized)")
            startTimerFallback()
        }
        #endif
    }
    
    private func startTimerFallback() {
        // –¢–∞–π–º–µ—Ä –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ —Å–∏–º—É–ª–∏—Ä—É–µ—Ç 1 –º–∏–Ω—É—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (1:1 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ)
        timer = Timer.scheduledTimer(withTimeInterval: 60, repeats: true) { [weak self] _ in
            Task { @MainActor [weak self] in
                self?.simulateAppUsage()
            }
        }
        
        message = "‚ö†Ô∏è –î–µ–º–æ-—Ä–µ–∂–∏–º: –≤—Ä–µ–º—è —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—É—é —Ä–µ–∞–ª—å–Ω—É—é –º–∏–Ω—É—Ç—É (—Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)"
    }
    
    func stopTracking() {
        isTrackingTime = false
        isBlocked = false  // –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        timer?.invalidate()
        timer = nil
        startTime = nil
        currentSessionElapsed = nil
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DeviceActivity –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if let familyService = familyControlsService as? FamilyControlsService {
            familyService.stopMonitoring()
        }
        
        print("üõë Tracking stopped - DeviceActivity monitoring disabled")
    }
    
    // Timer-based tracking (fallback without DeviceActivity entitlement)
    
    private func simulateAppUsage() {
        guard isTrackingTime else { return }
        print("‚è±Ô∏è DEMO: Simulating 1 minute of app usage")
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ 1 –º–∏–Ω—É—Ç—É
        updateSpentTime(minutes: spentMinutes + 1)
        
        // –°–ø–∏—Å—ã–≤–∞–µ–º –∏–∑ –±—é–¥–∂–µ—Ç–∞
        budgetEngine.consume(mins: 1)
        
        print("‚è±Ô∏è Spent: \(spentMinutes) min, Remaining: \(budgetEngine.remainingMinutes) min")
        
        if budgetEngine.remainingMinutes <= 0 {
            stopTracking()
            isBlocked = true
            message = "‚è∞ –î–ï–ú–û: –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!"
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ ManagedSettings
            if let familyService = familyControlsService as? FamilyControlsService {
                familyService.enableShield()
                print("üõ°Ô∏è Applied real app blocking via ManagedSettings")
            }
            
            notificationService.sendTimeExpiredNotification()
            sendReturnToAppNotification()
            AudioServicesPlaySystemSound(1005)
        }
    }
}

@main
struct StepsTraderApp: App {
    var body: some Scene {
        WindowGroup { ContentView() }
    }
}

// MARK: - Block Screen
struct BlockScreen: View {
    @ObservedObject var model: AppModel
    
    var body: some View {
        ZStack {
            // Background gradient
            LinearGradient(
                colors: [.red.opacity(0.1), .orange.opacity(0.3), .red.opacity(0.1)],
                startPoint: .topLeading,
                endPoint: .bottomTrailing
            )
            .ignoresSafeArea()
            
            VStack(spacing: 30) {
                // Icon and title
                VStack(spacing: 16) {
                    Text("‚è∞")
                        .font(.system(size: 80))
                    
                    Text("–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!")
                        .font(.largeTitle)
                        .fontWeight(.bold)
                        .foregroundColor(.red)
                    
                    Text("–í–∞—à–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å")
                        .font(.title2)
                        .multilineTextAlignment(.center)
                        .foregroundColor(.secondary)
                }
                
                // Stats
                VStack(spacing: 12) {
                    HStack {
                        Text("–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏:")
                        Spacer()
                        Text(formatTime(minutes: model.spentMinutes))
                            .fontWeight(.semibold)
                    }
                    
                    HStack {
                        Text("–ü–æ—Ç—Ä–∞—á–µ–Ω–æ —à–∞–≥–æ–≤:")
                        Spacer()
                        Text("\(model.spentSteps)")
                            .fontWeight(.semibold)
                    }
                    
                    Divider()
                    
                    HStack {
                        Text("–®–∞–≥–æ–≤ —Å–µ–≥–æ–¥–Ω—è:")
                        Spacer()
                        Text("\(Int(model.stepsToday))")
                            .fontWeight(.semibold)
                            .foregroundColor(.green)
                    }
        }
        .padding()
        .background(RoundedRectangle(cornerRadius: 16).fill(.ultraThinMaterial))
                
                // Action buttons
                VStack(spacing: 12) {
                    Text("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏:")
                        .font(.headline)
                        .multilineTextAlignment(.center)
                    
                    Text("üö∂‚Äç‚ôÇÔ∏è –°–¥–µ–ª–∞–π—Ç–µ –±–æ–ª—å—à–µ —à–∞–≥–æ–≤")
                        .font(.title3)
                        .fontWeight(.medium)
                        .foregroundColor(.blue)
                    
                    Text("\(Int(model.budget.tariff.stepsPerMinute)) —à–∞–≥–æ–≤ = 1 –º–∏–Ω—É—Ç–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
                
                Spacer()
                
                // Bottom buttons
                VStack(spacing: 12) {
                    Button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å") {
                        Task {
                            do {
                                try await model.recalc()
                                // –ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –º–∏–Ω—É—Ç—ã, —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                                if model.budget.remainingMinutes > 0 {
                                    model.isBlocked = false
                                    model.message = "‚úÖ –í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –î–æ—Å—Ç—É–ø–Ω–æ: \(model.budget.remainingMinutes) –º–∏–Ω"
                                } else {
                                    model.message = "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∞–≥–æ–≤ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"
                                }
                            } catch {
                                model.message = "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: \(error.localizedDescription)"
                            }
                        }
                    }
                    .frame(maxWidth: .infinity)
                    .buttonStyle(.borderedProminent)
                    .controlSize(.large)
                    
                    Button("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é") {
                        model.stopTracking()
                        model.isBlocked = false
                    }
                    .frame(maxWidth: .infinity)
                    .buttonStyle(.bordered)
                    .controlSize(.large)
                    .foregroundColor(.red)
                    
                    Button("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É") {
                        model.resetStatistics()
                    }
                    .frame(maxWidth: .infinity)
                    .buttonStyle(.bordered)
                    .controlSize(.large)
                    .foregroundColor(.orange)
                }
            }
            .padding()
        }
    }
    
    private func formatTime(minutes: Int) -> String {
        let hours = minutes / 60
        let remainingMinutes = minutes % 60
        
        if hours > 0 {
            return "\(hours)—á \(remainingMinutes)–º–∏–Ω"
        } else {
            return "\(remainingMinutes)–º–∏–Ω"
        }
    }
}

// MARK: - ContentView
struct ContentView: View {
    @StateObject private var model: AppModel
    
    init() {
        self._model = StateObject(wrappedValue: DIContainer.shared.makeAppModel())
    }

    var body: some View {
        // Show block screen if blocked, otherwise show tab interface
        if model.isBlocked {
            BlockScreen(model: model)
        } else {
            TabView {
                StatusView(model: model)
                    .tabItem {
                        Image(systemName: "house.fill")
                        Text("–°—Ç–∞—Ç—É—Å")
                    }
                
                SettingsView(model: model)
                    .tabItem {
                        Image(systemName: "gearshape.fill")
                        Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
                    }
            }
            .task { await model.bootstrap() }
            .alert("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", isPresented: Binding(get: { model.message != nil }, set: { _ in model.message = nil })) {
                Button("OK", role: .cancel) {}
            } message: { Text(model.message ?? "") }
        }
    }
}

// MARK: - StatusView
struct StatusView: View {
    @ObservedObject var model: AppModel
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 24) {
                    // –ú–∏–Ω–∏-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–≤–µ—Ä—Ö—É
                    miniStatsView
                    
                    // –ë–æ–ª—å—à–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ü–µ–Ω—Ç—Ä–µ
                    bigTimeDisplayView
                    
                    // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                    progressBarView
                    
                    Spacer(minLength: 20)
                }
                .padding()
            }
        }
    }
    
    // MARK: - Mini Stats
    private var miniStatsView: some View {
        HStack(spacing: 16) {
            StatMiniCard(
                icon: "figure.walk",
                title: "–®–∞–≥–∏ —Å–µ–≥–æ–¥–Ω—è",
                value: "\(Int(model.stepsToday))",
                color: .blue
            )
            
            StatMiniCard(
                icon: "clock",
                title: "–í—Å–µ–≥–æ –º–∏–Ω—É—Ç",
                value: "\(model.budget.dailyBudgetMinutes)",
                color: .green
            )
            
            StatMiniCard(
                icon: "timer",
                title: "–ü–æ—Ç—Ä–∞—á–µ–Ω–æ",
                value: formatTime(minutes: model.spentMinutes),
                color: .orange
            )
        }
    }
    
    // MARK: - Big Time Display
    private var bigTimeDisplayView: some View {
        VStack(spacing: 12) {
            if model.isBlocked {
                VStack(spacing: 8) {
                    Text("‚è∞")
                        .font(.system(size: 60))
                    
                    Text("–í—Ä–µ–º—è –ø—Ä–æ—à–ª–æ!")
                        .font(.title)
                        .fontWeight(.bold)
                        .foregroundColor(.red)
                        .multilineTextAlignment(.center)
                }
            } else {
                VStack(spacing: 8) {
                    Text("–û—Å—Ç–∞–ª–æ—Å—å")
                        .font(.title2)
                        .foregroundColor(.secondary)
                    
                    Text("\(model.budget.remainingMinutes)")
                        .font(.system(size: 80, weight: .bold, design: .rounded))
                        .foregroundColor(timeColor)
                        .contentTransition(.numericText())
                    
                    Text(model.budget.remainingMinutes == 1 ? "–º–∏–Ω—É—Ç–∞" : "–º–∏–Ω—É—Ç")
                        .font(.title2)
                        .foregroundColor(.secondary)
                }
            }
        }
        .frame(maxWidth: .infinity)
        .padding(.vertical, 40)
        .background(
            RoundedRectangle(cornerRadius: 20)
                .fill(timeBackgroundColor)
                .shadow(color: .black.opacity(0.1), radius: 10, x: 0, y: 5)
        )
    }
    
    // MARK: - Progress Bar
    private var progressBarView: some View {
        VStack(spacing: 8) {
            HStack {
                Text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤—Ä–µ–º–µ–Ω–∏")
                    .font(.headline)
                Spacer()
                Text("\(progressPercentage)%")
                    .font(.headline)
                    .foregroundColor(timeColor)
            }
            
            ProgressView(value: progressValue, total: 1.0)
                .progressViewStyle(LinearProgressViewStyle(tint: timeColor))
                .scaleEffect(x: 1, y: 2, anchor: .center)
        }
        .padding()
        .background(RoundedRectangle(cornerRadius: 16).fill(.ultraThinMaterial))
    }
    
    // MARK: - Control Buttons
    private var controlButtonsView: some View {
        VStack(spacing: 12) {
            // –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            Button(model.isTrackingTime ? "üîì –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ" : "üõ°Ô∏è –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ") {
                model.toggleRealBlocking()
            }
            .frame(maxWidth: .infinity, minHeight: 50)
            .background(model.isTrackingTime ? Color.red : Color.blue)
            .foregroundColor(.white)
            .font(.headline)
            .clipShape(RoundedRectangle(cornerRadius: 12))
            .disabled(!model.familyControlsService.isAuthorized || 
                     (!model.isTrackingTime && model.budget.remainingMinutes <= 0) ||
                     (model.appSelection.applicationTokens.isEmpty && model.appSelection.categoryTokens.isEmpty))
            
            // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
            if !model.isTrackingTime && model.budget.remainingMinutes <= 0 {
                Text("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏! –°–¥–µ–ª–∞–π—Ç–µ –±–æ–ª—å—à–µ —à–∞–≥–æ–≤.")
                    .font(.caption)
                    .foregroundColor(.orange)
                    .multilineTextAlignment(.center)
            }
            
            // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
            if model.appSelection.applicationTokens.isEmpty && model.appSelection.categoryTokens.isEmpty {
                Text("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                    .font(.caption)
                    .foregroundColor(.orange)
                    .multilineTextAlignment(.center)
            }
        }
        .padding()
        .background(RoundedRectangle(cornerRadius: 16).fill(.ultraThinMaterial))
    }
    
    // MARK: - Computed Properties
    private var timeColor: Color {
        let percentage = progressValue
        if percentage >= 0.9 {
            return .red
        } else if percentage >= 0.7 {
            return .orange
        } else {
            return .green
        }
    }
    
    private var timeBackgroundColor: Color {
        if model.isBlocked {
            return .red.opacity(0.1)
        } else {
            return timeColor.opacity(0.1)
        }
    }
    
    private var progressValue: Double {
        guard model.budget.dailyBudgetMinutes > 0 else { return 0 }
        let used = model.budget.dailyBudgetMinutes - model.budget.remainingMinutes
        return Double(used) / Double(model.budget.dailyBudgetMinutes)
    }
    
    private var progressPercentage: Int {
        Int(progressValue * 100)
    }
    
    private func formatTime(minutes: Int) -> String {
        if minutes < 60 {
            return "\(minutes)–º"
        } else {
            let hours = minutes / 60
            let remainingMinutes = minutes % 60
            return "\(hours)—á \(remainingMinutes)–º"
        }
    }
}

// MARK: - StatMiniCard Component
struct StatMiniCard: View {
    let icon: String
    let title: String
    let value: String
    let color: Color

    var body: some View {
        VStack(spacing: 8) {
            Image(systemName: icon)
                .font(.title2)
                .foregroundColor(color)
            
            Text(title)
                .font(.caption)
                .foregroundColor(.secondary)
                .multilineTextAlignment(.center)
            
            Text(value)
                .font(.headline)
                .fontWeight(.semibold)
                .foregroundColor(color)
        }
        .frame(maxWidth: .infinity)
        .padding()
        .background(
            RoundedRectangle(cornerRadius: 12)
                .fill(color.opacity(0.1))
        )
    }
}

// MARK: - SettingsView
struct SettingsView: View {
    @ObservedObject var model: AppModel
    @State private var showAppSelector = false
    
    var body: some View {
        NavigationView {
            Form {
                // 1. –°–µ–∫—Ü–∏—è —Ç–∞—Ä–∏—Ñ–∞ (—Å–Ω–∞—á–∞–ª–∞)
                tariffSection
                
                // 2. –°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                appSelectionSection
                
                // 3. –°–µ–∫—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (–∫–Ω–æ–ø–∫–∞ –Ω–∞—á–∞—Ç—å/–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å)
                trackingSection
                
                // 4. –°–µ–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                managementSection
                
                // 5. –°–µ–∫—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
                systemStatusSection
            }
            .familyActivityPicker(isPresented: $showAppSelector, selection: $model.appSelection)
        }
    }
    
    // MARK: - App Selection Section
    private var appSelectionSection: some View {
        Section("–í—ã–±–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è") {
            VStack(alignment: .leading, spacing: 12) {
            HStack {
                    Image(systemName: "iphone.and.arrow.forward")
                        .foregroundColor(.blue)
                    .font(.title2)
                    
                    VStack(alignment: .leading, spacing: 4) {
                        Text("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
                            .font(.headline)
                        
                        if model.appSelection.applicationTokens.isEmpty && model.appSelection.categoryTokens.isEmpty {
                            Text("–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
                                .font(.body)
                                .foregroundColor(.secondary)
                        } else {
                            VStack(alignment: .leading, spacing: 2) {
                                Text("‚úÖ –í—ã–±—Ä–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                                    .font(.body)
                                    .foregroundColor(.green)
                                
                                Text("üíæ –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                            }
                        }
                    }
                    
                Spacer()
            }
            
                VStack(spacing: 8) {
                    Button(model.appSelection.applicationTokens.isEmpty && model.appSelection.categoryTokens.isEmpty ? "üì± –í—ã–±—Ä–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" : "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ") {
                        showAppSelector = true
                    }
                    .frame(maxWidth: .infinity)
                    .buttonStyle(.bordered)
                    
                    // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤—ã–±—Ä–∞–Ω–æ)
                    if !model.appSelection.applicationTokens.isEmpty || !model.appSelection.categoryTokens.isEmpty {
                        Button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä") {
                            model.appSelection = FamilyActivitySelection()
                        }
                        .frame(maxWidth: .infinity)
                        .buttonStyle(.bordered)
                        .foregroundColor(.red)
                    }
                }
            }
            .padding(.vertical, 8)
        }
    }
    
    // MARK: - Tariff Section
    private var tariffSection: some View {
        Section("–¢–∞—Ä–∏—Ñ –æ–±–º–µ–Ω–∞") {
            VStack(alignment: .leading, spacing: 16) {
                Text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –Ω—É–∂–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 1 –º–∏–Ω—É—Ç—ã –≤—Ä–µ–º–µ–Ω–∏:")
                    .font(.caption)
                    .foregroundColor(.secondary)
                
                ForEach(Tariff.allCases, id: \.self) { tariff in
                    TariffOptionView(
                        tariff: tariff,
                        isSelected: model.budget.tariff == tariff
                    ) {
                        selectTariff(tariff)
                    }
                }
            }
            .padding(.vertical, 8)
        }
    }
    
    // MARK: - Tracking Section
    private var trackingSection: some View {
        Section("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏") {
            VStack(spacing: 16) {
                // –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                Button(model.isTrackingTime ? "üîì –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ" : "üõ°Ô∏è –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ") {
                    model.toggleRealBlocking()
                }
                .frame(maxWidth: .infinity, minHeight: 50)
                .background(model.isTrackingTime ? Color.red : Color.blue)
                .foregroundColor(.white)
                .font(.headline)
                .clipShape(RoundedRectangle(cornerRadius: 12))
                .disabled(!model.familyControlsService.isAuthorized || 
                         (!model.isTrackingTime && model.budget.remainingMinutes <= 0) ||
                         (model.appSelection.applicationTokens.isEmpty && model.appSelection.categoryTokens.isEmpty))
                
                // –°—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                if model.isTrackingTime {
                    HStack {
                        Image(systemName: "circle.fill")
                            .foregroundColor(.green)
                            .font(.caption)
                        Text("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ")
                            .font(.caption)
                            .foregroundColor(.green)
                    }
                }
                
                // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                VStack(spacing: 8) {
                    if !model.isTrackingTime && model.budget.remainingMinutes <= 0 {
                        HStack {
                            Image(systemName: "exclamationmark.triangle.fill")
                                .foregroundColor(.orange)
                            Text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏! –°–¥–µ–ª–∞–π—Ç–µ –±–æ–ª—å—à–µ —à–∞–≥–æ–≤.")
                                .font(.caption)
                                .foregroundColor(.orange)
                        }
                    }
                    
                    if model.appSelection.applicationTokens.isEmpty && model.appSelection.categoryTokens.isEmpty {
                        HStack {
                            Image(systemName: "exclamationmark.triangle.fill")
                                .foregroundColor(.orange)
                            Text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã—à–µ")
                                .font(.caption)
                                .foregroundColor(.orange)
                        }
                    }
                    
                    if !model.familyControlsService.isAuthorized {
                        HStack {
                            Image(systemName: "exclamationmark.triangle.fill")
                                .foregroundColor(.red)
                            Text("Family Controls –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                                .font(.caption)
                                .foregroundColor(.red)
                        }
                    }
                }
            }
            .padding(.vertical, 8)
        }
    }
    
    // MARK: - Management Section
    private var managementSection: some View {
        Section("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ") {
            VStack(spacing: 12) {
                Button("üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –±—é–¥–∂–µ—Ç") {
                    Task {
                        await model.recalcSilently()
                        model.message = "‚úÖ –ë—é–¥–∂–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω"
                    }
                }
                .frame(maxWidth: .infinity)
                .buttonStyle(.bordered)
                
                Button("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É") {
                    model.resetStatistics()
                }
                .frame(maxWidth: .infinity)
                .buttonStyle(.bordered)
                .foregroundColor(.orange)
                
                Button("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞") {
                    model.runDiagnostics()
                }
                .frame(maxWidth: .infinity)
                .buttonStyle(.bordered)
                .foregroundColor(.blue)
            }
            .padding(.vertical, 8)
        }
    }
    
    // MARK: - System Status Section
    private var systemStatusSection: some View {
        Section("–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã") {
            VStack(alignment: .leading, spacing: 12) {
                StatusRow(
                    icon: "heart.fill",
                    title: "HealthKit",
                    status: .connected,
                    description: "–î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –æ —à–∞–≥–∞—Ö"
                )
                
                StatusRow(
                    icon: "shield.fill",
                    title: "Family Controls",
                    status: model.familyControlsService.isAuthorized ? .connected : .disconnected,
                    description: model.familyControlsService.isAuthorized ? "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∞" : "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
                )
                
                StatusRow(
                    icon: "bell.fill",
                    title: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                    status: .connected,
                    description: "Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã"
                )
                
                if !model.familyControlsService.isAuthorized {
                    Button("üîê –ó–∞–ø—Ä–æ—Å–∏—Ç—å Family Controls") {
                        Task {
                            do {
                                try await model.familyControlsService.requestAuthorization()
                                model.message = "‚úÖ Family Controls –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—à–µ–Ω–∞"
                            } catch {
                                model.message = "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: \(error.localizedDescription)"
                            }
                        }
                    }
                    .frame(maxWidth: .infinity)
                    .buttonStyle(.borderedProminent)
                    .foregroundColor(.white)
                }
            }
            .padding(.vertical, 8)
        }
    }
    
    // MARK: - Actions
    private func selectTariff(_ tariff: Tariff) {
        model.budget.updateTariff(tariff)
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±—é–¥–∂–µ—Ç —Å –Ω–æ–≤—ã–º —Ç–∞—Ä–∏—Ñ–æ–º
        Task {
            await model.recalcSilently()
            await MainActor.run {
                model.message = "‚úÖ –¢–∞—Ä–∏—Ñ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ \(tariff.displayName)"
            }
        }
    }
}

// MARK: - TariffOptionView Component
struct TariffOptionView: View {
    let tariff: Tariff
    let isSelected: Bool
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            HStack(spacing: 16) {
                // –ò–∫–æ–Ω–∫–∞ —Ç–∞—Ä–∏—Ñ–∞
                Text(tariffIcon)
                    .font(.title2)
            
            VStack(alignment: .leading, spacing: 4) {
                    Text(tariff.displayName)
                        .font(.headline)
                        .foregroundColor(.primary)
                    
                    Text(tariff.description)
                    .font(.caption)
                        .foregroundColor(.secondary)
                }
                
                Spacer()
                
                // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–±–æ—Ä–∞
                Image(systemName: isSelected ? "checkmark.circle.fill" : "circle")
                    .foregroundColor(isSelected ? .blue : .gray)
                    .font(.title2)
        }
        .padding()
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(isSelected ? Color.blue.opacity(0.1) : Color.clear)
        .overlay(
                        RoundedRectangle(cornerRadius: 12)
                            .stroke(isSelected ? Color.blue : Color.gray.opacity(0.3), lineWidth: 1)
                    )
            )
        }
        .buttonStyle(PlainButtonStyle())
    }
    
    private var tariffIcon: String {
        switch tariff {
        case .easy: return "üíé"
        case .medium: return "üî•"
        case .hard: return "üí™"
        }
    }
}

// MARK: - StatusRow Component
struct StatusRow: View {
    let icon: String
    let title: String
    let status: ConnectionStatus
    let description: String
    
    enum ConnectionStatus {
        case connected, disconnected, warning
        
        var color: Color {
            switch self {
            case .connected: return .green
            case .disconnected: return .red
            case .warning: return .orange
            }
        }
        
        var icon: String {
            switch self {
            case .connected: return "checkmark.circle.fill"
            case .disconnected: return "xmark.circle.fill"
            case .warning: return "exclamationmark.triangle.fill"
            }
        }
    }
    
    var body: some View {
        HStack(spacing: 12) {
            Image(systemName: icon)
                .foregroundColor(status.color)
                .font(.title3)
            
            VStack(alignment: .leading, spacing: 2) {
                Text(title)
                    .font(.headline)
                
                Text(description)
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            Spacer()
            
            Image(systemName: status.icon)
                .foregroundColor(status.color)
                .font(.title3)
        }
        .padding(.vertical, 4)
    }
}