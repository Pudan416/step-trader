import SwiftUI
import FamilyControls

// MARK: - SettingsView
struct SettingsView: View {
    @ObservedObject var model: AppModel
    @State private var isPickerPresented = false
    
    var body: some View {
        NavigationView {
            Form {
                // –ë–∞–ª–∞–Ω—Å –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞
                balanceSection

                // –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞ (—Ç–∞—Ä–∏—Ñ)
                tariffSection

                // –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                appSelectionSection

                // –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                systemStatusSection
                managementSection
            }
        }
    }
    
    // MARK: - Computed Properties
    private var remainingStepsToday: Int {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞—Ä–∏—Ñ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—ã–ª–∏ –ø–æ—Ç—Ä–∞—á–µ–Ω—ã –º–∏–Ω—É—Ç—ã, –∞ –Ω–µ —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ
        let spentSteps = model.spentMinutes * Int(model.spentTariff.stepsPerMinute)
        return max(0, Int(model.stepsToday) - spentSteps)
    }
    
    private func isTariffAvailable(_ tariff: Tariff) -> Bool {
        let requiredSteps = Int(tariff.stepsPerMinute)
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —à–∞–≥–æ–≤, –∞ –Ω–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –º–∏–Ω—É—Ç
        return Int(model.stepsToday) >= requiredSteps
    }
    
    // MARK: - Balance Section (–ø–µ—Ä-–≤—Ö–æ–¥–æ–≤–∞—è –º–æ–¥–µ–ª—å)
    private var balanceSection: some View {
        Section("–ë–∞–ª–∞–Ω—Å") {
            VStack(spacing: 12) {
                HStack {
                    Text("–ë–∞–ª–∞–Ω—Å —à–∞–≥–æ–≤")
                        .font(.headline)
                    Spacer()
                    Text("\(model.stepsBalance)")
                        .font(.headline)
                        .foregroundColor(model.stepsBalance < model.entryCostSteps ? .red : .green)
                }
                HStack {
                    Text("–°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞")
                        .foregroundColor(.secondary)
                    Spacer()
                    Text("\(model.entryCostSteps)")
                        .foregroundColor(.primary)
                }
                HStack {
                    Text("–û—Å—Ç–∞—Ç–æ–∫ —à–∞–≥–æ–≤")
                        .foregroundColor(.secondary)
                    Spacer()
                    Text("\(remainingStepsToday)")
                        .foregroundColor(.blue)
                }
                Button("–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å") {
                    Task { await model.refreshStepsBalance() }
                }
                .frame(maxWidth: .infinity)
                .buttonStyle(.borderedProminent)
            }
            .padding(.vertical, 6)
        }
    }
    
    // MARK: - App Selection Section (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Å–ø–∏—Å–∫–µ)
    private var appSelectionSection: some View {
        Section("–í—ã–±–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è") {
            VStack(alignment: .leading, spacing: 12) {
                // –ü–æ–¥—Å–∫–∞–∑–∫–∞ –∏–∑ Shortcuts
                if let desired = getAutoSelectedApp() {
                    HStack(alignment: .top, spacing: 8) {
                        Image(systemName: "lightbulb.fill").foregroundColor(.yellow)
                        Text("–ò–∑ —à–æ—Ä—Ç–∫–∞—Ç–∞: –≤—ã–±–µ—Ä–∏—Ç–µ \(desired) –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ")
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                }

                // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞
                if !model.appSelection.applicationTokens.isEmpty || !model.appSelection.categoryTokens.isEmpty {
                    HStack(spacing: 8) {
                        Image(systemName: "checkmark.circle.fill").foregroundColor(.green)
                        Text("–í—ã–±—Ä–∞–Ω–æ: \(model.appSelection.applicationTokens.isEmpty ? "–∫–∞—Ç–µ–≥–æ—Ä–∏—è" : "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")")
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                } else {
                    HStack(spacing: 8) {
                        Image(systemName: "exclamationmark.triangle.fill").foregroundColor(.orange)
                        Text("–ü–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
                            .font(.caption)
                            .foregroundColor(.orange)
                    }
                }

                // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ FamilyActivityPicker
                Button("–í—ã–±—Ä–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞") {
                    isPickerPresented = true
                }
                .frame(maxWidth: .infinity)
                .buttonStyle(.borderedProminent)
                .controlSize(.regular)
            }
            .padding(.vertical, 8)
        }
        .sheet(isPresented: $isPickerPresented) {
            NavigationView {
                FamilyActivityPicker(selection: $model.appSelection)
                    .navigationTitle("–í—ã–±–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
                    .navigationBarTitleDisplayMode(.inline)
                    .toolbar {
                        ToolbarItem(placement: .cancellationAction) {
                            Button("–ì–æ—Ç–æ–≤–æ") { isPickerPresented = false }
                        }
                    }
            }
            .ignoresSafeArea()
        }
        // –ê–≤—Ç–æ‚Äë–∑–∞–∫—Ä—ã—Ç–∏–µ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ‚Äë—Ç–æ –≤—ã–±—Ä–∞–ª
        .onChange(of: model.appSelection.applicationTokens.count) { _, newValue in
            if newValue > 0 || model.appSelection.categoryTokens.count > 0 {
                isPickerPresented = false
            }
        }
        .onChange(of: model.appSelection.categoryTokens.count) { _, newValue in
            if newValue > 0 || model.appSelection.applicationTokens.count > 0 {
                isPickerPresented = false
            }
        }
        
    }
    
    // MARK: - Tariff Section
    private var tariffSection: some View {
        Section("–¢–∞—Ä–∏—Ñ –æ–±–º–µ–Ω–∞") {
            VStack(alignment: .leading, spacing: 16) {
                Text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞ –∏ –∫—É—Ä—Å —à–∞–≥–∏‚Üí–º–∏–Ω—É—Ç—ã")
                    .font(.caption)
                    .foregroundColor(.secondary)
                
                ForEach(Tariff.allCases, id: \.self) { tariff in
                    TariffOptionView(
                        tariff: tariff,
                        isSelected: model.budget.tariff == tariff,
                        isDisabled: !isTariffAvailable(tariff),
                        stepsToday: model.stepsToday
                    ) {
                        selectTariff(tariff)
                        model.persistEntryCost(tariff: tariff)
                    }
                    .overlay(alignment: .trailing) {
                        Text("–≤—Ö–æ–¥: \(tariff.entryCostSteps) —à–∞–≥–æ–≤")
                            .font(.caption)
                            .foregroundColor(.secondary)
                            .padding(.trailing, 8)
                    }
                }
            }
            .padding(.vertical, 8)
        }
    }
    
    // MARK: - Tracking Section
    private var trackingSection: some View {
        Section("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏") {
            VStack(spacing: 16) {
                
                
                // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–≤—ã–±–æ—Ä–µ
                if let autoSelected = getAutoSelectedApp() {
                    HStack {
                        Image(systemName: "checkmark.circle.fill")
                            .foregroundColor(.green)
                        Text("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–æ: \(autoSelected)")
                            .font(.caption)
                            .foregroundColor(.secondary)
                        Spacer()
                    }
                    .padding(.horizontal, 8)
                    .padding(.vertical, 4)
                    .background(Color.green.opacity(0.1))
                    .clipShape(RoundedRectangle(cornerRadius: 8))
                }
                
                // –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                Button(model.isTrackingTime ? "üîì –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ" : "üõ°Ô∏è –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ") {
                    model.toggleRealBlocking()
                }
                .frame(maxWidth: .infinity, minHeight: 50)
                .background(model.isTrackingTime ? Color.red : Color.blue)
                .foregroundColor(.white)
                .font(.headline)
                .clipShape(RoundedRectangle(cornerRadius: 12))
                .disabled(!model.familyControlsService.isAuthorized || 
                         (!model.isTrackingTime && model.remainingMinutes <= 0) ||
                         (model.appSelection.applicationTokens.isEmpty && model.appSelection.categoryTokens.isEmpty))
                
                // –°—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                if model.isTrackingTime {
                    HStack {
                        Image(systemName: "circle.fill")
                            .foregroundColor(.green)
                            .font(.caption)
                        Text("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ")
                            .font(.caption)
                            .foregroundColor(.green)
                    }
                }
                
                // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                VStack(spacing: 8) {
                    if !model.isTrackingTime && model.remainingMinutes <= 0 {
                        HStack {
                            Image(systemName: "exclamationmark.triangle.fill")
                                .foregroundColor(.orange)
                            Text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏! –°–¥–µ–ª–∞–π—Ç–µ –±–æ–ª—å—à–µ —à–∞–≥–æ–≤.")
                                .font(.caption)
                                .foregroundColor(.orange)
                        }
                    }
                    
                    if model.appSelection.applicationTokens.isEmpty && model.appSelection.categoryTokens.isEmpty {
                        HStack {
                            Image(systemName: "exclamationmark.triangle.fill")
                                .foregroundColor(.orange)
                            Text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã—à–µ")
                                .font(.caption)
                                .foregroundColor(.orange)
                        }
                    }
                    
                    if !model.familyControlsService.isAuthorized {
                        HStack {
                            Image(systemName: "exclamationmark.triangle.fill")
                                .foregroundColor(.red)
                            Text("Family Controls –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                                .font(.caption)
                                .foregroundColor(.red)
                        }
                    }
                }
            }
            .padding(.vertical, 8)
        }
    }
    
    // MARK: - Management Section
    private var managementSection: some View {
        Section("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ") {
            VStack(spacing: 12) {
                Button("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞") {
                    model.runDiagnostics()
                }
                .frame(maxWidth: .infinity)
                .buttonStyle(.bordered)
                .foregroundColor(.blue)
            }
            .padding(.vertical, 8)
        }
    }
    
    // MARK: - System Status Section
    private var systemStatusSection: some View {
        Section("–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã") {
            VStack(alignment: .leading, spacing: 12) {
                StatusRow(
                    icon: "heart.fill",
                    title: "HealthKit",
                    status: .connected,
                    description: "–î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –æ —à–∞–≥–∞—Ö"
                )
                
                StatusRow(
                    icon: "shield.fill",
                    title: "Family Controls",
                    status: model.familyControlsService.isAuthorized ? .connected : .disconnected,
                    description: model.familyControlsService.isAuthorized ? "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∞" : "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
                )
                
                StatusRow(
                    icon: "bell.fill",
                    title: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                    status: .connected,
                    description: "Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã"
                )
                
                if !model.familyControlsService.isAuthorized {
                    Button("üîê –ó–∞–ø—Ä–æ—Å–∏—Ç—å Family Controls") {
                        Task {
                            do {
                                try await model.familyControlsService.requestAuthorization()
                                model.message = "‚úÖ Family Controls –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—à–µ–Ω–∞"
                            } catch {
                                model.message = "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: \(error.localizedDescription)"
                            }
                        }
                    }
                    .frame(maxWidth: .infinity)
                    .buttonStyle(.borderedProminent)
                    .foregroundColor(.white)
                }
            }
            .padding(.vertical, 8)
        }
    }
    
    // MARK: - Actions
    private func selectTariff(_ tariff: Tariff) {
        // –¢–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞, –Ω–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±—é–¥–∂–µ—Ç
        model.budget.updateTariff(tariff)
        model.message = "‚úÖ –¢–∞—Ä–∏—Ñ –≤—ã–±—Ä–∞–Ω: \(tariff.displayName). –ë—é–¥–∂–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."
    }
    
    private func getPendingShortcutApp() -> String? {
        let userDefaults = UserDefaults.stepsTrader()
        guard let bundleId = userDefaults.string(forKey: "pendingShortcutApp") else {
            return nil
        }
        
        switch bundleId {
        case "com.burbn.instagram": return "Instagram"
        case "com.zhiliaoapp.musically": return "TikTok"
        case "com.google.ios.youtube": return "YouTube"
        default: return bundleId
        }
    }
    
    private func getAutoSelectedApp() -> String? {
        let userDefaults = UserDefaults.stepsTrader()
        guard let bundleId = userDefaults.string(forKey: "autoSelectedAppBundleId") else {
            return nil
        }
        
        switch bundleId {
        case "com.burbn.instagram": return "Instagram"
        case "com.zhiliaoapp.musically": return "TikTok"
        case "com.google.ios.youtube": return "YouTube"
        default: return bundleId
        }
    }
}
