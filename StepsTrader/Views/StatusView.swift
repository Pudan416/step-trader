import SwiftUI
import AudioToolbox
import UserNotifications

// MARK: - StatusView
struct StatusView: View {
    @ObservedObject var model: AppModel
    @State private var timer: Timer?
    @State private var lastAvailableMinutes: Int = 0
    @State private var lastNotificationMinutes: Int = -1
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 24) {
                    // –ü–æ–ª–æ—Å–∞ —Å –æ—Å—Ç–∞—Ç–∫–æ–º —à–∞–≥–æ–≤ —Å–≤–µ—Ä—Ö—É
                    remainingStepsBarView

                    // –ú–∏–Ω–∏-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–¥ –æ–ø–ª–∞—Ç—É –∑–∞ –≤—Ö–æ–¥)
                    miniStatsView

                    // –ö–∞—Ä—Ç–æ—á–∫–∞ –æ–ø–ª–∞—Ç—ã –≤—Ö–æ–¥–∞
                    VStack(spacing: 12) {
                        HStack {
                            Text("–ë–∞–ª–∞–Ω—Å —à–∞–≥–æ–≤")
                                .font(.headline)
                            Spacer()
                            Text("\(model.stepsBalance)")
                                .font(.headline)
                                .foregroundColor(model.stepsBalance < model.entryCostSteps ? .red : .green)
                        }
                        HStack {
                            Text("–°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞")
                                .foregroundColor(.secondary)
                            Spacer()
                            Text("\(model.entryCostSteps)")
                                .foregroundColor(.primary)
                        }
                        Button("–û–ø–ª–∞—Ç–∏—Ç—å –≤—Ö–æ–¥") {
                            Task {
                                await model.refreshStepsBalance()
                                if model.canPayForEntry() { 
                                    _ = model.payForEntry()
                                    // –†–µ–¥–∏—Ä–µ–∫—Ç –≤ Instagram –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
                                    openInstagram()
                                }
                            }
                        }
                        .frame(maxWidth: .infinity)
                        .buttonStyle(.borderedProminent)
                        .disabled(model.stepsBalance < model.entryCostSteps)
                        
                        Button("üì± –û—Ç–∫—Ä—ã—Ç—å Instagram") {
                            openInstagram()
                        }
                        .frame(maxWidth: .infinity)
                        .buttonStyle(.bordered)
                        .foregroundColor(.pink)
                    }
                    .padding()
                    .background(RoundedRectangle(cornerRadius: 16).fill(.ultraThinMaterial))

                    Spacer(minLength: 20)
                }
                .padding()
            }
        }
        .onAppear {
            onAppear()
        }
        .onDisappear {
            onDisappear()
        }
        .onChange(of: model.isTrackingTime) { isTracking in
            if isTracking {
                startTimer()
            } else {
                stopTimer()
            }
        }
    }
    
    // MARK: - Remaining Steps Bar
    private var remainingStepsBarView: some View {
        VStack(spacing: 8) {
            HStack {
                Text("–û—Å—Ç–∞—Ç–æ–∫ —à–∞–≥–æ–≤")
                    .font(.headline)
                Spacer()
                Text("\(remainingStepsToday)")
                    .font(.headline)
                    .foregroundColor(.blue)
            }
            
            ProgressView(value: Double(remainingStepsToday), total: Double(Int(model.stepsToday)))
                .progressViewStyle(LinearProgressViewStyle(tint: .blue))
                .scaleEffect(x: 1, y: 2, anchor: .center)
        }
        .padding()
        .background(RoundedRectangle(cornerRadius: 16).fill(.ultraThinMaterial))
    }
    
    // MARK: - Mini Stats (–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–æ)
    private var miniStatsView: some View {
        HStack(spacing: 16) {
            StatMiniCard(
                icon: "figure.walk",
                title: "–®–∞–≥–∏ —Å–µ–≥–æ–¥–Ω—è",
                value: "\(Int(model.stepsToday))",
                color: .blue
            )
            
            StatMiniCard(
                icon: "shoeprints.fill",
                title: "–ë–∞–ª–∞–Ω—Å —à–∞–≥–æ–≤",
                value: "\(model.stepsBalance)",
                color: .green
            )
            
            StatMiniCard(
                icon: "creditcard",
                title: "–°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞",
                value: "\(model.entryCostSteps)",
                color: .orange
            )
        }
    }
    
    // MARK: - Big Time Display
    private var bigTimeDisplayView: some View {
        VStack(spacing: 12) {
            if model.isBlocked {
                VStack(spacing: 8) {
                    Text("‚è∞")
                        .font(.system(size: 60))
                    
                    Text("–í—Ä–µ–º—è –ø—Ä–æ—à–ª–æ!")
                        .font(.title)
                        .fontWeight(.bold)
                        .foregroundColor(.red)
                        .multilineTextAlignment(.center)
                }
            } else {
                VStack(spacing: 8) {
                    Text("–û—Å—Ç–∞–ª–æ—Å—å")
                        .font(.title2)
                        .foregroundColor(.secondary)
                    
                    Text("\(calculatedRemainingMinutes)")
                        .font(.system(size: 80, weight: .bold, design: .rounded))
                        .foregroundColor(timeColor)
                        .contentTransition(.numericText())
                    
                    Text(calculatedRemainingMinutes == 1 ? "–º–∏–Ω—É—Ç–∞" : "–º–∏–Ω—É—Ç")
                        .font(.title2)
                        .foregroundColor(.secondary)
                }
            }
        }
        .frame(maxWidth: .infinity)
        .padding(.vertical, 40)
        .background(
            RoundedRectangle(cornerRadius: 20)
                .fill(timeBackgroundColor)
                .shadow(color: .black.opacity(0.1), radius: 10, x: 0, y: 5)
        )
    }
    
    // MARK: - Progress Bar
    private var progressBarView: some View {
        VStack(spacing: 8) {
            HStack {
                Text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤—Ä–µ–º–µ–Ω–∏")
                    .font(.headline)
                Spacer()
                Text("\(progressPercentage)%")
                    .font(.headline)
                    .foregroundColor(timeColor)
            }
            
            ProgressView(value: progressValue, total: 1.0)
                .progressViewStyle(LinearProgressViewStyle(tint: timeColor))
                .scaleEffect(x: 1, y: 2, anchor: .center)
        }
        .padding()
        .background(RoundedRectangle(cornerRadius: 16).fill(.ultraThinMaterial))
    }
    
    // MARK: - Control Buttons
    private var controlButtonsView: some View {
        VStack(spacing: 12) {
            // –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            Button(model.isTrackingTime ? "üîì –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ" : "üõ°Ô∏è –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ") {
                model.toggleRealBlocking()
            }
            .frame(maxWidth: .infinity, minHeight: 50)
            .background(model.isTrackingTime ? Color.red : Color.blue)
            .foregroundColor(.white)
            .font(.headline)
            .clipShape(RoundedRectangle(cornerRadius: 12))
            .disabled(!model.familyControlsService.isAuthorized || 
                     (!model.isTrackingTime && model.remainingMinutes <= 0) ||
                     (model.appSelection.applicationTokens.isEmpty && model.appSelection.categoryTokens.isEmpty))
            
            // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
            if !model.isTrackingTime && model.remainingMinutes <= 0 {
                Text("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏! –°–¥–µ–ª–∞–π—Ç–µ –±–æ–ª—å—à–µ —à–∞–≥–æ–≤.")
                    .font(.caption)
                    .foregroundColor(.orange)
                    .multilineTextAlignment(.center)
            }
            
            // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
            if model.appSelection.applicationTokens.isEmpty && model.appSelection.categoryTokens.isEmpty {
                Text("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                    .font(.caption)
                    .foregroundColor(.orange)
                    .multilineTextAlignment(.center)
            }
        }
        .padding()
        .background(RoundedRectangle(cornerRadius: 16).fill(.ultraThinMaterial))
    }
    
    // MARK: - Computed Properties
    private var remainingStepsToday: Int {
        let spentSteps = model.spentMinutes * Int(model.spentTariff.stepsPerMinute)
        return max(0, Int(model.stepsToday) - spentSteps)
    }
    
    private var calculatedRemainingMinutes: Int {
        return max(0, model.dailyBudgetMinutes - model.spentMinutes)
    }
    
    private var timeColor: Color {
        if calculatedRemainingMinutes <= 0 {
            return .red
        } else if calculatedRemainingMinutes < 10 {
            return .red
        } else if calculatedRemainingMinutes <= 30 {
            return .orange
        } else {
            return .blue
        }
    }
    
    private var timeBackgroundColor: Color {
        if model.isBlocked {
            return .red.opacity(0.1)
        } else {
            return timeColor.opacity(0.1)
        }
    }
    
    private var progressValue: Double {
        guard model.dailyBudgetMinutes > 0 else { return 0 }
        let used = model.dailyBudgetMinutes - model.remainingMinutes
        return Double(used) / Double(model.dailyBudgetMinutes)
    }
    
    private var progressPercentage: Int {
        Int(progressValue * 100)
    }
    
    private func formatTime(minutes: Int) -> String {
        return "\(minutes) –º–∏–Ω"
    }
    
    // MARK: - Timer Management
    private func startTimer() {
        timer?.invalidate()
        timer = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { _ in
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –±—é–¥–∂–µ—Ç –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            model.reloadBudgetFromStorage()
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            model.loadSpentTime()
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è
            if calculatedRemainingMinutes > 0 {
                lastAvailableMinutes = calculatedRemainingMinutes
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –æ—Å—Ç–∞–≤—à–∏–º—Å—è –≤—Ä–µ–º–µ–Ω–µ–º
            sendRemainingTimeNotificationIfNeeded()
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è
            checkTimeExpiration()
        }
    }
    
    private func checkTimeExpiration() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –∏ –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
        if model.isTrackingTime && calculatedRemainingMinutes <= 0 && !model.isBlocked {
            print("‚è∞ Time expired in StatusView - triggering blocking")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            let minutesBeforeBlocking = lastAvailableMinutes > 0 ? lastAvailableMinutes : 0
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
            model.stopTracking()
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            model.isBlocked = true
            model.message = "‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!"
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
            if let familyService = model.familyControlsService as? FamilyControlsService {
                familyService.enableShield()
                print("üõ°Ô∏è Applied real app blocking via ManagedSettings")
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–∏–Ω—É—Ç, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –¥–æ—Å—Ç—É–ø–Ω–æ
            model.notificationService.sendTimeExpiredNotification(remainingMinutes: minutesBeforeBlocking);            model.sendReturnToAppNotification()
            AudioServicesPlaySystemSound(1005)
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å –ª–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if model.isBlocked && calculatedRemainingMinutes > 0 {
            print("üîÑ New time available after blocking - unblocking app")
            unblockApp()
        }
    }
    
    private func unblockApp() {
        // –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        model.isBlocked = false
        model.message = "‚úÖ –í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –î–æ—Å—Ç—É–ø–Ω–æ: \(calculatedRemainingMinutes) –º–∏–Ω"
        
        // –°–Ω–∏–º–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        if let familyService = model.familyControlsService as? FamilyControlsService {
            familyService.disableShield()
            print("üîì Removed app blocking via ManagedSettings")
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
        model.notificationService.sendUnblockNotification(remainingMinutes: calculatedRemainingMinutes)
        AudioServicesPlaySystemSound(1003) // Success sound
    }
    
    
    private func stopTimer() {
        timer?.invalidate()
        timer = nil
    }
    
    private func sendRemainingTimeNotificationIfNeeded() {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Ä–µ–º—è –º–µ–Ω—å—à–µ 10 –º–∏–Ω—É—Ç –∏ –±–æ–ª—å—à–µ 0
        // –ò —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–∏–Ω—É—Ç—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
        if calculatedRemainingMinutes > 0 && calculatedRemainingMinutes < 10 && calculatedRemainingMinutes != lastNotificationMinutes {
            model.notificationService.sendRemainingTimeNotification(remainingMinutes: calculatedRemainingMinutes)
            lastNotificationMinutes = calculatedRemainingMinutes
        }
    }
    
    private func onAppear() {
        if model.isTrackingTime {
            startTimer()
        }
    }
    
    private func onDisappear() {
        stopTimer()
    }
    
    private func openInstagram() {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ Instagram –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        let userDefaults = UserDefaults.stepsTrader()
        userDefaults.set(Date(), forKey: "instagramOpenedFromStepsTrader")
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º Instagram —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π URL scheme
        if let url = URL(string: "instagram://app") {
            UIApplication.shared.open(url) { success in
                if !success {
                    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å Instagram, –æ—Ç–∫—Ä—ã–≤–∞–µ–º App Store
                    if let appStoreURL = URL(string: "https://apps.apple.com/app/instagram/id389801252") {
                        UIApplication.shared.open(appStoreURL)
                    }
                } else {
                    // Instagram –æ—Ç–∫—Ä—ã–ª—Å—è —É—Å–ø–µ—à–Ω–æ, –ù–ï –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                    // –ü—É—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—Å—è –Ω–∞ Instagram
                    print("‚úÖ Instagram opened successfully")
                }
            }
        }
    }
}
